<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/01/hello-world/"/>
      <url>2021/04/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建(三)：Typora + PicGo + Gitee图床</title>
      <link href="2021/03/19/bo-ke-da-jian-san-typora-picgo-github-gitee-tu-chuang/"/>
      <url>2021/03/19/bo-ke-da-jian-san-typora-picgo-github-gitee-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-PicGo"><a href="#1-PicGo" class="headerlink" title="1.PicGo"></a>1.PicGo</h2><p>PicGo 是一位中国开发者基于 electron-vue 开发的用于快速上传图片并获取图片 URL 链接的开源工具，GitHub主页：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>，作者博客：<a href="https://molunerfinn.com/">MARKSZのBlog</a>。</p><p>PicGo 只要配置好图床类型，就可以直接拖拽图片进行上传并自动返回图片链接，配合 Typora 还可以实现在文章中插入图片时自动上传并替换为链接内容，完全不用感知上传图片的过程。</p><p>PicGo 本体支持七牛云、腾讯云、又拍云、阿里云、SM、Imgur、GitHub这些图床，而且还支持自己扩展第三方图床的支持插件，比如就有人开发了 Gitee 的插件。更多介绍见<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">官方文档</a>，下载地址：<a href="https://molunerfinn.com/PicGo/">PicGo</a></p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319153825247.png"></p><h3 id="PicGo-配置"><a href="#PicGo-配置" class="headerlink" title="PicGo 配置"></a>PicGo 配置</h3><p>打开 PicGo ,选择<code>图床设置</code>，选择<code>GitHub图床</code>，填写参数：</p><ul><li><code>设定仓库名</code>，填写格式为<code>用户名/仓库名</code></li><li><code>设定分支名</code>，填写默认分支<code>master</code>或者<code>main</code></li><li><code>设定Token</code>，填写上一步获取的 token 值</li><li><code>指定存储路径</code>，选填，可以自定义名称，比如用年月来分类，不填图片会上传在仓库根目录。</li><li><code>设定自定义域名</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面配置CDN加速需要更改此项。</li></ul><p>选择设为默认图床，点击确定保存配置。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319154120522.png"></p><p>配置完成后，点击<code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在<code>PicGo设置</code>，打开<code>上传后自动复制URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319154210153.png"></p><h2 id="2-Typora"><a href="#2-Typora" class="headerlink" title="2.Typora"></a>2.Typora</h2><p>网上有很多介绍的 Typora 的文章，推荐两篇写的很详细的文章。</p><p>深度介绍(必看)：<a href="https://sspai.com/post/54912">少数派:Typora 完全使用详解</a></p><p>快捷键介绍：<a href="https://www.cnblogs.com/hider/p/11614688.html">Typora入门</a></p><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><p>下面介绍几个我觉得很有用很方便的设置。</p><p>打开<code>文件</code> –&gt; <code>偏好设置</code>。</p><h4 id="1-打开自动保存"><a href="#1-打开自动保存" class="headerlink" title="1. 打开自动保存"></a>1. 打开自动保存</h4><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319160508255.png"></p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319160438837.png"></p><h4 id="2-打开成对符号"><a href="#2-打开成对符号" class="headerlink" title="2. 打开成对符号"></a>2. 打开成对符号</h4><p>选择<code>编辑器</code>，勾选 <code>匹配括号和引号</code>和<code>匹配 Markdown 字符</code>。这样当我们输入括号(<code>[]()&#123;&#125;</code>)等成对的符号时，只需要输入左边一半，软件会自动补充右边一半。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319160619876.png"></p><h4 id="3-打开首行缩进（可选）"><a href="#3-打开首行缩进（可选）" class="headerlink" title="3. 打开首行缩进（可选）"></a>3. 打开首行缩进（可选）</h4><p>选择<code>Markdown</code>，勾选 <code>首行缩进</code>。这个看自己需要，只是在 Typora 本地显示中首行缩进，因为 Markdown 语法本身并没有支持首行缩进的符号，所以文件拿到别的地方不会有首行缩进的效果。如果非要首行缩进，可以在段落开头加个<code>  </code>可以在其他地方打开时也能首行缩进。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319160749716.png"></p><h4 id="4-打开自动保存图片"><a href="#4-打开自动保存图片" class="headerlink" title="4. 打开自动保存图片"></a>4. 打开自动保存图片</h4><p>选择<code>图像</code>，选择<code>插入图片时...</code>自动执行的动作：</p><ul><li>默认是<code>无特殊操作</code>，当你写文章时，粘贴或者拖动进来的图片会自动保存在<code>C:\Users\&lt;电脑用户名&gt;\AppData\Roaming\Typora\typora-user-images</code>目录下。</li><li><code>复制图片到当前文件夹</code>，选择该选项时，粘贴或者拖动进来的图片会自动保存在当前编辑的文件同目录下。</li><li><code>复制图片到 ./$&#123;filename&#125;.assets 文件夹</code>，选择该选项时，粘贴或者拖动图片进来，会自动在当前编辑的文件目录下新建文件夹<code>$&#123;filename&#125;.assets</code>并将图片复制到该文件夹下，其中``${filename}<code>是当前编辑的文件名，不包含</code>.md`。</li><li><code>上传图片</code>，选择该选项时，粘贴或者拖动图片进来，会根据下面的<code>上传服务设置</code>将图片自动上传到图床，平时最好用这个设置，详细内容在下一篇文章中介绍。</li><li><code>复制到指定路经</code>，选择该选项时，可以自己填入一个文件夹，粘贴或者拖动图片进来，会自动创建文件夹并将图片复制进去。</li></ul><p>建议选择<code>上传图片</code>，按照下篇文章的方法将图片保存在图床。当然，如果写的的文章只保存在本地或者需要断网时浏览，那么可以选择其他几个选项。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319160905411.png"></p><h2 id="3-Gitee-图床"><a href="#3-Gitee-图床" class="headerlink" title="3.Gitee 图床"></a>3.Gitee 图床</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h3><p>第一步要先在 Gitee 新建一个仓库用于存储图片。</p><p>依次填写<code>仓库名称</code>，<code>路径</code>，<code>仓库介绍</code>，注意要勾选<code>公开</code>和<code>使用Readme文件初始化这个仓库</code>，最后点击创建。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155107411.png"></p><h3 id="2-获取私人令牌"><a href="#2-获取私人令牌" class="headerlink" title="2. 获取私人令牌"></a>2. 获取私人令牌</h3><p><strong>私人令牌</strong>主要用于让 PicGo 有权限往我们的仓库 push 代码(图片)。</p><p>点击自己的头像，选择<strong>设置</strong>。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319154703777.png"></p><p>点击<strong>私人令牌</strong>，选择生成新令牌。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155200623.png"></p><p>同样的，我们只勾选更新代码的权限。填写<code>私人令牌描述</code>，点击提交。因为是敏感操作，此时需要确认密码。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155350155.png"></p><p>复制字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155439361.png"></p><h3 id="3-PicGo-配置"><a href="#3-PicGo-配置" class="headerlink" title="3. PicGo 配置"></a>3. PicGo 配置</h3><p>PicGo 本体没有支持 Gitee ，所以需要下载一个插件，有人己经写好了。</p><p>打开 PicGo ，点击 <code>插件设置</code>，搜索框输入<code>gitee</code>，目前有两个插件应该都能用，任选一个安装，这里我选择的后面那个。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155300283.png"></p><p>安装好插件后，这时再选择<code>图床设置</code>，选择<code>gitee</code>，填写参数：</p><ul><li><code>repo</code>，填写格式为<code>用户名/仓库名</code></li><li><code>branch</code>，填写默认分支<code>master</code></li><li><code>token</code>，填写上一步获取的私人令牌的值</li><li><code>path</code>，选填，可以自定义名称，不填图片会上传在仓库根目录。</li><li><code>customPath</code>，这个会在上一个参数的基础上再创建一层子文件夹用于按年、年月或年季来分类保存。</li><li><code>customUrl</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面解决<code>文件大于1M，登录后可见</code>的问题需要更改此项。</li></ul><p>选择设为默认图床，点击确定保存配置。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155603781.png"></p><h3 id="4-Typora-配置"><a href="#4-Typora-配置" class="headerlink" title="4. Typora 配置"></a>4. Typora 配置</h3><p>打开<code>文件</code>，<code>偏好设置</code>，<code>图像</code>，选择插入图片时<code>上传图片</code>，勾选图中三个选项，上传服务设定选择<code>PicGo (app)</code>，PicGo 路径通过后面的文件夹选择自己电脑上 PicGo 的安装路径。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319154451161.png"></p><p>此时，使用 Typora 编辑文件，拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到我们的 GitHub 图床，并把返回的图片链接粘贴到文章中，快去试试吧。</p><h3 id="5-解决”文件大于1M，登录后可见”问题"><a href="#5-解决”文件大于1M，登录后可见”问题" class="headerlink" title="5. 解决”文件大于1M，登录后可见”问题"></a>5. 解决”文件大于1M，登录后可见”问题</h3><p>从上一步可以看到 Gitee 存储的图片地址是 <code>https://gitee.com/yushuaigee/myblog/raw</code> 开头的网址，这个域名是国内站点，速度很快，无需配置CDN加速，图床配置好之后，图片上传成功，在浏览器也能打开，看似没毛病，其实暗藏玄机。</p><p>如果你上传的图片大于 1M ，不管是在下一步的 Typora 中还是在浏览器网页中，是无法加载出图片的，比如这张图片<code>https://gitee.com/yushuaigee/myblog/raw/master/img/myblog.gif</code>，输入到浏览器会显示<code>文件大于1M，登录后可见</code>。如果能打开是因为你前面已经登录了 Gitee 了，浏览器新建一个无痕窗口就打不开了。</p><p>可是别人在浏览我们博客时不可能要先登录个 Gitee 吧，所以要想办法解决一下。前面我们将博客仓库打开 Gitee Pages 功能，其他人可以访问我们博客仓库里的博客了，图床仓库也一样，打开它的 Gitee Pages 功能，无需登陆就可以访问里面的图片了。</p><p>进入图床仓库主页，点击<code>服务</code>，<code>Gitee Pages</code>。</p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155816376.png"></p><p><img src="https://guan-zehui.gitee.io/my-blog/img/image-20210319155836510.png"></p><p>点击<code>启动</code>部署。</p><p>这样我们就可以通过Gitee Pages 地址来访问图床仓库里的图片了</p><p><strong>这种方法也存在一个问题</strong>，就是因为 Gitee Pages 不支持自动更新 (pro版支持，需要收费)，每次上传完图片后，需要打开浏览器手动点一下更新。你可以写完文章，把图片一把上传，再点一次更新。</p>]]></content>
      
      
      <categories>
          
          <category> 应用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建（二）：基于 Gitee pages 建站</title>
      <link href="2021/03/18/bo-ke-da-jian-er-ji-yu-gitee-pages-jian-zhan/"/>
      <url>2021/03/18/bo-ke-da-jian-er-ji-yu-gitee-pages-jian-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-Gitee-Pages-简介"><a href="#一、-Gitee-Pages-简介" class="headerlink" title="一、 Gitee Pages 简介"></a>一、 Gitee Pages 简介</h2><p><a href="https://gitee.com/help/articles/4136">Gitee pages 官网</a> 的介绍：Gitee Pages 是一个免费的静态网页托管服务，您可以使用 Gitee Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用 Gitee 的 Pages服务。目前 Gitee Pages 支持 Jekyll、Hugo、Hexo编译静态资源。</p><h2 id="二、Gitee-Pages-准备"><a href="#二、Gitee-Pages-准备" class="headerlink" title="二、Gitee Pages 准备"></a>二、Gitee Pages 准备</h2><h3 id="1-注册-Gitee-账号"><a href="#1-注册-Gitee-账号" class="headerlink" title="1. 注册 Gitee 账号"></a>1. 注册 Gitee 账号</h3><h3 id="2-创建-Gitee-Pages-仓库"><a href="#2-创建-Gitee-Pages-仓库" class="headerlink" title="2. 创建 Gitee Pages 仓库"></a>2. 创建 Gitee Pages 仓库</h3><p>登录账号后，点击页面右上角的+，选择新建仓库。</p><p>仓库名称这里建议填写<code>你的用户名</code>，这样生成出来的网页地址是比较纯净的形式，如<code>https://&lt;你的用户名&gt;.github.io</code>。当然也可以自定义名称，比如<code>blog </code>，但是这样后面生成出来的网页地址会带一个子目录，像<code>https://&lt;你的用户名&gt;.github.io/blog</code>这样。</p><p>注意勾选 <code>使用Readme文件初始化这个仓库</code>，会自动创建<code>master</code>分支并生成一个 <code>readme.md</code>文件。</p><p>最后点击下面的创建。</p><p>点击页面右上角的服务，选择Gitee Pages。</p><p>勾选<code>强制使用HTTPS</code>，点击启动。</p><h3 id="3-测试-Gitee-Pages-页面"><a href="#3-测试-Gitee-Pages-页面" class="headerlink" title="3. 测试 Gitee Pages 页面"></a>3. 测试 Gitee Pages 页面</h3><p>创建 Gitee Pages 仓库后，为了测试能否访问 Pages 服务，我们给它添加一个静态网页。</p><p>先点击左边的代码回到文件页面，然后点击文件 – 新建文件在仓库下新建文件。</p><p>输入文件名<code>index.html</code>，在下面输入内容<code>&lt;h1&gt;这是我的博客!&lt;/h1&gt;</code>，这是 html 标记语言，表示一级标题。</p><p>其他保持默认，点击最下面的提交，提交文件到仓库。</p><p><strong>与 GitHub 提交自动部署不同的是，Gitee上提交后需要手动部署。</strong>(网上有许多实现了 Gitee Pages 自动部署的脚本，其实就是用脚本模拟下面的操作，可以参考)</p><p>点击页面右上角的服务，选择Gitee Pages回到部署界面。</p><p>点击下面的更新，下图中红框圈出的就是你的博客地址了，格式为<code>https://&lt;你的用户名&gt;.github.io</code>。</p><p>点击博客地址或者在浏览器输入博客地址。此时就可以看见我们刚创建的网页，其中的内容就是刚才写的内容。说明 Gitee Pages 服务已经正常。</p><h2 id="三、Gitee-Pages-发布"><a href="#三、Gitee-Pages-发布" class="headerlink" title="三、Gitee Pages 发布"></a>三、Gitee Pages 发布</h2><p>上一步 “测试 Gitee Pages 页面” 中，我们在 Gitee Pages 仓库目录下新建了一个<code>index.html</code>，就可以在自己的专属网址看到这个网页了。同理我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，部署提交只需要几条命令。</p><h3 id="1-配置-Git-参数"><a href="#1-配置-Git-参数" class="headerlink" title="1. 配置 Git 参数"></a>1. 配置 Git 参数</h3><p>在博客根目录下，右键，打开Git Bash Here。</p><p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中 username 和 username@XXX.com 是你注册 GitHub 的用户名和邮箱</span><span class="token function">git</span> config --global user.name <span class="token string">"username"</span><span class="token function">git</span> config --global user.email <span class="token string">"username@XXX.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 GitHub 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p><p>输入下面命令，然后一直按回车，直到结束</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中 username@XXX.com 是你注册 GitHub 的邮箱</span>ssh-keygen -t rsa -C <span class="token string">"username@XXX.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以你的邮箱结尾的长字符串。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat后面的路径就是上图中的公钥文件路径，直接复制过来就可以</span><span class="token function">cat</span> /c/Users/XXX/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制公钥内容（其实在Git Bash命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，默认鼠标中键是粘贴）。</p><p>打开自己的 Github 主页，点击右上角的头像，点击Settings。</p><p><strong>添加个人公钥</strong></p><p><img src="https://guan-zehui.gitee.io/my-blog/img/20190529233042934.png" alt="20190529233042934"></p><p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>你的用户名</code>和<code>successfully</code>字样，说明配置成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下面的命令什么都不用改</span><span class="token function">ssh</span> -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-安装-Hexo-发布插件"><a href="#2-安装-Hexo-发布插件" class="headerlink" title="2. 安装 Hexo 发布插件"></a>2. 安装 Hexo 发布插件</h3><p>在博客根目录下，右键，打开Git Bash Here。</p><p>输入下面的命令，安装<code>hexo-deployer-git</code>。（安装失败或者卡住，参考第一篇文章修改 npm 源。）</p><p>这个插件用于把生成好的静态页面上传到 Gitee Pages 仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3. 发布 ! ! !"></a>3. 发布 ! ! !</h3><p>从第一篇到现在这么多步骤过去了，可以说前面的所有操作都是在为最后的这一步<code>发布</code>做准备，现在终于到了见证奇迹的时刻了。</p><p>先别着急激动，让我们完成最最后一步配置，我们需要告诉 hexo 发布到哪里去，也就是把文件上传到哪个仓库。</p><p>打开博客<code>根目录配置文件</code>(<code>D:\MyBlog\_config.yaml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将url改为自己的网址</span><span class="token comment"># 其中 xxxxxx 是前面多次用到的你的Gitee用户名，注意是master分支</span>deploy:  type: <span class="token function">git</span>  repo: git@gitee.com:xxxxxx/xxxxxx.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建（一）：本地搭建 Hexo 框架</title>
      <link href="2021/03/17/bo-ke-da-jian-yi-ben-di-da-jian-hexo-kuang-jia/"/>
      <url>2021/03/17/bo-ke-da-jian-yi-ben-di-da-jian-hexo-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hexo框架简介"><a href="#一、Hexo框架简介" class="headerlink" title="一、Hexo框架简介"></a>一、Hexo框架简介</h2><p>Hexo是一个专门用于博客类网站的开源项目，使用Node.js语言开发。Hexo搭建过程简单快捷，配置灵活，可定制性非常高，许多开发者为他开发了丰富的主题库。</p><p>Hexo 中文网站：<a href="https://hexo.io/zh-cn/">hexo.io</a>，GitHub 地址：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a> 。</p><h2 id="二、Hexo-依赖环境安装：Node-js-、Git"><a href="#二、Hexo-依赖环境安装：Node-js-、Git" class="headerlink" title="二、Hexo 依赖环境安装：Node.js 、Git"></a>二、Hexo 依赖环境安装：Node.js 、Git</h2><h3 id="1-、Node-js"><a href="#1-、Node-js" class="headerlink" title="1 、Node.js"></a>1 、Node.js</h3><p>Hexo 使用 Node.js 开发，所以安装 Hexo 之前需要先安装 Node.js 环境。Node.js 是运行在服务端的 JavaScript ，安装了 Node.js 环境，就可以不用依赖浏览器就可以运行 js 代码，它也是基于 Chrome 引擎开发的一个开源项目。</p><h4 id="1-、官网下载-Node-js"><a href="#1-、官网下载-Node-js" class="headerlink" title="1)、官网下载 Node.js"></a>1)、官网下载 Node.js</h4><p>Node.js 中文官网： <a href="https://nodejs.org/zh-cn/">nodejs.org</a></p><h4 id="2-、安装-Node-js"><a href="#2-、安装-Node-js" class="headerlink" title="2)、安装 Node.js"></a>2)、安装 Node.js</h4><p>下载完安装包后双击打开，一路点 Next 就行了。</p><h4 id="3-、测试-Node-js-是否安装成功"><a href="#3-、测试-Node-js-是否安装成功" class="headerlink" title="3)、测试 Node.js 是否安装成功"></a>3)、测试 Node.js 是否安装成功</h4><p>终端输入：<code>npm -v</code>，出现版本号说明安装成功。<a href="https://www.runoob.com/nodejs/nodejs-npm.html">NPM命令使用介绍</a></p><h3 id="2、Git"><a href="#2、Git" class="headerlink" title="2、Git"></a>2、Git</h3><p>Git（读音/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。简单理解就是下载代码的工具，因为 Hexo 是一个托管于 GitHub 上的开源项目，所以安装 Hexo 的时候需要使用 Git 来下载源码和依赖代码，而且后面要将自己的博客发布到 GitHub pages 或者 Gitee pages 上面也需要使用 Git。</p><h4 id="1-、官网下载-Git"><a href="#1-、官网下载-Git" class="headerlink" title="1)、官网下载 Git"></a>1)、官网下载 Git</h4><p>Git 官网：<a href="https://git-scm.com/">git-scm.com</a></p><h4 id="2-、安装-Git"><a href="#2-、安装-Git" class="headerlink" title="2)、安装 Git"></a>2)、安装 Git</h4><p>下载完安装包后双击打开，没有特殊需要的话，一路点 Next 就行了。</p><h4 id="3-、测试-Git-是否安装成功"><a href="#3-、测试-Git-是否安装成功" class="headerlink" title="3)、测试 Git 是否安装成功"></a>3)、测试 Git 是否安装成功</h4><p>Git 安装完成后，通过新增的右键菜单Git Bash Here就可以打开。在桌面空白处右键，选择Git Bash Here，输入<code>git --version</code>回车，如果出现版本号说明安装成功。</p><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><h3 id="1、本地安装-Hexo"><a href="#1、本地安装-Hexo" class="headerlink" title="1、本地安装 Hexo"></a>1、本地安装 Hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在 D 盘根目录，取名 MyBlog。</p><p>进入新建的文件夹，右键，选择 <code>Git Bash Here</code> ，依次输入下面的命令。</p><pre class="line-numbers language-none"><code class="language-none"># 安装 hexo 框架npm install -g hexo-cli# 初始化文件夹hexo init# 安装 hexo 依赖包npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一行安装 hexo 模块，-g表示安装全局模块；第二行是 hexo 初始化，会用 git clone命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p><h3 id="2、可能遇到的问题"><a href="#2、可能遇到的问题" class="headerlink" title="2、可能遇到的问题"></a>2、可能遇到的问题</h3><ul><li><p><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong>。</p><p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是<code>https://registry.npmjs.org/</code>。</p></li></ul><h3 id="3、本地博客效果"><a href="#3、本地博客效果" class="headerlink" title="3、本地博客效果"></a>3、本地博客效果</h3><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。还是在<code>Git Bash</code>命令行窗口里，依次执行下面的命令。</p><pre class="line-numbers language-none"><code class="language-none"># 生成静态网站hexo g# 启动服务器hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接执行<code>hexo g &amp;&amp; hexo s</code>，其中<code>hexo g</code>是 <code>hexo generate</code>命令的简写，<code>hexo s</code>是 <code>hexo server</code>命令的简写。此时，打开浏览器，输入网址<code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。</p><h2 id="四、发布文章"><a href="#四、发布文章" class="headerlink" title="四、发布文章"></a>四、发布文章</h2><h3 id="1、新建文章"><a href="#1、新建文章" class="headerlink" title="1、新建文章"></a>1、新建文章</h3><p>在博客根目录下右键，选择<code>Git Bash Here</code>，输入下面命令</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;我的第一篇博客&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时进入博客根目录下的<code>source\_posts</code>(D:\MyBlog\source_posts)文件夹，可以看到多了一个<code>我的第一篇博客.md</code>文件，这便是新生成的博客文章。</p><h3 id="2、发布文章"><a href="#2、发布文章" class="headerlink" title="2、发布文章"></a>2、发布文章</h3><p>先 Ctrl + C 停止服务器，执行<code>hexo g &amp;&amp; hexo s</code>重新部署，刷新<code>http://localhost:4000/</code>，可以看到博客上多了一篇文章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记</title>
      <link href="2021/03/17/markdown-bi-ji/"/>
      <url>2021/03/17/markdown-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 .md, .markdown。</p><h2 id="Markdown应用"><a href="#Markdown应用" class="headerlink" title="Markdown应用"></a>Markdown应用</h2><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>本教程将使用 Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。</p><p>支持导出HTML、PDF、Word、图片等多种类型文件。</p><p>Typora 官网：<a href="https://typora.io/">https://typora.io/</a></p><h2 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h2><p>Markdown 标题有两种格式</p><h3 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用 = 和 - 标记一级和二级标题"></a>1、使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">我展示的是一级标题<span class="token punctuation">=================</span></span><span class="token title important">我展示的是二级标题<span class="token punctuation">-----------------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用-号标记"><a href="#2、使用-号标记" class="headerlink" title="2、使用 # 号标记"></a>2、使用 # 号标记</h3><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong> 。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="line-numbers language-none"><code class="language-none">**** * ******- - -----------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><pre class="line-numbers language-none"><code class="language-none">GOOGLE.COM~~BAIDU.COM~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的标签来实现：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>带下划线文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><pre class="line-numbers language-none"><code class="language-none">[^要注明的文本]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<strong><em><strong>)、加号(</strong>+</em>*)或是减号(</strong>-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项<span class="token list punctuation">*</span> 第二项<span class="token list punctuation">*</span> 第三项<span class="token list punctuation">+</span> 第一项<span class="token list punctuation">+</span> 第二项<span class="token list punctuation">+</span> 第三项<span class="token list punctuation">-</span> 第一项<span class="token list punctuation">-</span> 第二项<span class="token list punctuation">-</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项<span class="token list punctuation">2.</span> 第二项<span class="token list punctuation">3.</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项：    <span class="token list punctuation">-</span> 第一项嵌套的第一个元素    <span class="token list punctuation">-</span> 第一项嵌套的第二个元素<span class="token list punctuation">2.</span> 第二项：    <span class="token list punctuation">-</span> 第二项嵌套的第一个元素    <span class="token list punctuation">-</span> 第二项嵌套的第二个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块引用<span class="token blockquote punctuation">></span> 学的不仅是技术<span class="token blockquote punctuation">></span> 更是梦想<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 最外层<span class="token blockquote punctuation">> ></span> 第一层嵌套<span class="token blockquote punctuation">> > ></span> 第二层嵌套<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块中使用列表<span class="token blockquote punctuation">></span> <span class="token list punctuation">1.</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">2.</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项    > 学的不仅是技术    > 更是梦想<span class="token list punctuation">*</span> 第二项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">`<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">```javascript$<span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p><pre class="line-numbers language-none"><code class="language-none">[链接名称](链接地址)或者&lt;链接地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><pre class="line-numbers language-none"><code class="language-none">这个链接用 1 作为网址变量 [Google][1]然后在文档的结尾为变量赋值（网址）  [1]: http:&#x2F;&#x2F;www.google.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>开头一个感叹号 !</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><pre class="line-numbers language-none"><code class="language-none">![A](http:&#x2F;&#x2F;   )![A](http:&#x2F;&#x2F; &quot;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>当然，你也可以像网址那样对图片网址使用变量:</p><pre class="line-numbers language-none"><code class="language-none">这个链接用 1 作为网址变量 [A][1].然后在文档的结尾为变量赋值（网址）[1]: http:&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;.png&quot; width&#x3D;&quot;50%&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><pre class="line-numbers language-none"><code class="language-none">| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre class="line-numbers language-none"><code class="language-none">使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class="line-numbers language-none"><code class="language-none">**文本加粗** \*\* 正常显示星号 \*\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="2021/03/16/wo-de-di-yi-pian-bo-ke/"/>
      <url>2021/03/16/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="博客的创建"><a href="#博客的创建" class="headerlink" title="博客的创建"></a>博客的创建</h2><p>​        2020 年 3 月 17 日，大学四年也来到了最后一个学期，毕业设计开始的时候，在做准备工作的过程中，发现这个世界有意思的东西好多。每个都想学好，无处下手，上周想找个东西能整理记录学习的历程，最终选择了写博客。</p><h2 id="本博客包含的内容"><a href="#本博客包含的内容" class="headerlink" title="本博客包含的内容"></a>本博客包含的内容</h2><p>先挖坑，再慢慢完善。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"> 一。工具类1. Office2. 博客二。计算机语言1. C 语言2. Python3. R 语言三. Linux 系统四。其他1. 公众号运营2. 电脑组装 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 一切的开始 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/16/hello-world/"/>
      <url>2021/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
