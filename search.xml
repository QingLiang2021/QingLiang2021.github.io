<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PT 实用工具 &amp; 脚本分享</title>
      <link href="2021/05/29/pt-shi-yong-gong-ju-jiao-ben-fen-xiang/"/>
      <url>2021/05/29/pt-shi-yong-gong-ju-jiao-ben-fen-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://yukino.nl/2019/08/10/pt-tools/">yukino.nl</a></p></blockquote><p>不止不觉入坑快一年了，我已经忘记了当初注册蒲公英的目的是啥，但是无非就是想快速下东西、想看电影罢了。一年花在 PT 上的时间也蛮多的，或许也是一种逃避？</p><p>当初小白的时候总是能问出各种各样的沙雕问题，还好当初的前辈都很和蔼，至少不像我一样暴躁，感谢就不写在这了，本文主要是一个个人认为有价值的脚本 &amp; 知识的一个收录合集，希望后来者能少走点弯路。</p><p>本文建议当成一个简单的 Q&amp;A 使用，具体请点击右侧相关问题 TAG 跳转</p><p>Attention：如果你是个大佬，应该不会在本文中看到什么出彩的东西，全都是抄的或者干脆丢了个链接。</p><p>PS：本人又懒又喜欢废话，还喜欢说一些错的东西，希望有大佬看到哪里错了可以说一下。</p><h2 id="盒子（seedbox）是什么-“盒子（seedbox）是什么”-盒子（seedbox）是什么"><a href="#盒子（seedbox）是什么-“盒子（seedbox）是什么”-盒子（seedbox）是什么" class="headerlink" title="[](# 盒子（seedbox）是什么 “盒子（seedbox）是什么”) 盒子（seedbox）是什么"></a>[](# 盒子（seedbox）是什么 “盒子（seedbox）是什么”) 盒子（seedbox）是什么</h2><p>个人理解盒子是一类用于进行 PT/BT 下载的远程服务器。</p><p>盒子主要类型，从 IP 情况来说分为：共享盒子和非共享，前者主要是一些专业 seedbox 提供商，例如 SeedHost、Feral Hosting 等，后者例如 hetzner 等独立服务器提供商。</p><h2 id="盒子的选购：-“盒子的选购：”-盒子的选购："><a href="#盒子的选购：-“盒子的选购：”-盒子的选购：" class="headerlink" title="[](# 盒子的选购： “盒子的选购：”) 盒子的选购："></a>[](# 盒子的选购： “盒子的选购：”) 盒子的选购：</h2><h3 id="盒子的选择：-“盒子的选择：”-盒子的选择："><a href="#盒子的选择：-“盒子的选择：”-盒子的选择：" class="headerlink" title="[](# 盒子的选择： “盒子的选择：”) 盒子的选择："></a>[](# 盒子的选择： “盒子的选择：”) 盒子的选择：</h3><p>这方面受到时间限制较为大，而且我用的也不是很多，就随便说一点了</p><p>在挑选的过程中，你需要先明确几个问题：</p><ol><li>预算 2. 需要刷什么站 3. 打算刷多少 4. 有没有自己购买的能力（Visa 或者 Master 信用卡）</li></ol><p>内站由于一些 seedbox 的限制（不能超过 100M/S、部分站点不可使用共享盒）无法使用共享盒。</p><p>最新站点盒子限制表 <a href="https://www.kdocs.cn/l/sEi6Sg5iu">https://www.kdocs.cn/l/sEi6Sg5iu</a></p><p>常见盒子收集表（里面很多价格是买不到的，具体请阅读备注页）</p><p>~ 具体可以参考 <a href="https://github.com/Aniverse">@Aniverse</a> 收集的盒子限制表如下～</p><p><del>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/tv9ONmpwkqUsTLP.png)</del></p><p>~ 图片可能看不清 可以尝试直接访问 <a href="https://sm.ms/image/tv9ONmpwkqUsTLP">https://sm.ms/image/tv9ONmpwkqUsTLP</a>~</p><p>独立服务器（杜甫）</p><p>比较常见的盒子有 oneprovider 的各价位机型、hetzner 的拍卖机、scaleway 的特价机，</p><p><a href="https://oneprovider.com/dedicated-servers/1gbps">oneprovider</a> 下文简称其为 op。一般都是买他家的巴黎机器，他家巴黎的机器一般是替 scaleway 分销 个人点评：客服回复速度较慢，机子容易出问题，提供的系统镜像版本少且版本较老，低价位可以考虑购买。退款较难。</p><p><a href="https://www.hetzner.com/">hetzner</a>：其普通机器在非活动期间有安装费且费用较高（34 欧元）起步，属于中高档机器，而大部分人购买的是其 <a href="https://www.hetzner.com/sb">拍卖机</a>，拍卖机价格浮动，有的时候可以遇到比较好的传家宝机器，其后台支持机器转让，因此在 hostloc 上有不少人转手机器赚取差价。机器使用不满 14 天可以无条件退款，请勿滥用，可能导致封号。</p><p><a href="https://www.scaleway.com/fr/dedibox/">scaleway</a>：以前叫 online，现在改名了，他家的机房主要在荷兰和法国，平常的价格很黑基本买不起，促销的时候力度大的机器一般很棒，例如 ST8 ST12 等，但是有些机器跑的流量多了可能会被限速。</p><p>共享盒子：</p><p><a href="https://www.seedhost.eu/">Seedhost</a>：流量少，盘一般大，刷力尚可，超过流量上限后限速至 100mbps，提供安装 rt de，起步 6 欧元，这家其实也有提供杜甫出租，但是常年无货。其 SSD 机器据说刷力不错，外站经常见到。</p><p><a href="https://www.feralhosting.com/">Feral Hosting</a>：不限流，机子看脸，运气好可以跑得很快，起步 10 英镑。</p><p><a href="https://ultraseedbox.com/">ultraseedbox</a>：有限流与不限流的机器可供选择，买过一个 5 欧元的小鸡，体验尚可，小鸡流量太少了。现在的 NVME SSD 机器不建议选购，网相比老 SSD 机器差了很多。</p><p>保种鸡：</p><p>由于大部分保种鸡需求和上述两者不同，保种鸡只要能一直开机盘体积大就行，性能是不需要考虑的 (x)</p><p><a href="https://www.soyoustart.com/">SoYouStart</a>: 现在已经买不到了，只能从已有机器的人那里租或者收账号，配置可以使用 <a href="https://github.com/amefs/quickbox-arm">quickbox-arm</a></p><p>一些大盘 VPS：注意此处雷区还是比较多的，有些 one-man idc 例如 hostsolution 之类的就不要去送人头了</p><p>一些个人 seedbox provider：</p><p>Andy：一个很著名的 seedbox provider，提供的机器主要使用 OVH / NForce / LeaseWeb / Hetzner 的网络，主要活跃在 discord：<a href="https://discord.gg/7Gv8tdM"><strong>https://discord.gg/7Gv8tdM</strong></a> 和 <a href="https://www.reddit.com/user/Andy10gbit">reddit</a> （均需要科学上网）机器价位相对偏高</p><ol><li> 帮你配置 + 各类软件的技术支持，不给 root，这种情况下给最好的优化</li><li> 帮你配置 + 各类软件的技术支持，给 root，但是给你的优化要差一点</li><li> 给 root，软件自己装</li><li> 你提供自己买的服务器的 root 给他，他帮你配置，配置完以后你仍然有 root 权限（给的是和 2 一样的优化方案）</li></ol><h3 id="盒子的购买：-“盒子的购买：”-盒子的购买："><a href="#盒子的购买：-“盒子的购买：”-盒子的购买：" class="headerlink" title="[](# 盒子的购买： “盒子的购买：”) 盒子的购买："></a>[](# 盒子的购买： “盒子的购买：”) 盒子的购买：</h3><p>仅列举几个自己购买过的</p><p>VISA&amp;Master 信用卡：全部</p><p>支持 pp：hetzner、oneprovider、seedhost、ultraseedbox、</p><p>支持支付宝 &amp; 微信：oneprovider</p><p>其中 hetzner 新账号注册需要验证，你可以选择 pp 支付 20 欧元，或者提交身份证明，例如身份证 + 信用卡背面（记得遮挡 CVV 码），或者护照、驾照、具体抄了一下盒子群的 bot</p><p>①拍卖页面购买的机器不会立即生成账单，14 天以内取消机器算免费试用，但不要多次尝试，账号会被封！</p><p>②账号注册后需要验证身份，会收到一封要求验证身份的邮件，将身份证或者护照和信用卡放在一起拍照片发过去，为了安全可以适当打码并且用证件水印助手 APP 处理下</p><p>③也可以直接付款 20 欧让账号生效，但也不是百分百靠谱，可能仍然需要验证，付的 20 欧作为余额可以在购买机器时消费，如果收到如下邮件等个 10 分钟左右可能就成功了，否则会继续收到需要验证身份信息<br><a href="https://pic.ymgblog.com/images/2019/06/23/e3a42dd6acefaf3f3e70200ee1e88440.png">https://pic.ymgblog.com/images/2019/06/23/e3a42dd6acefaf3f3e70200ee1e88440.png</a></p><p>④购买机器时如果费用带税可以按下图设置 <a href="https://pic.ymgblog.com/images/2019/06/23/b1000f5014824ee249ebfd8cf48b0d2b.png">https://pic.ymgblog.com/images/2019/06/23/b1000f5014824ee249ebfd8cf48b0d2b.png</a></p><p>找人代购盒子的注意事项：</p><p> 有能力自己买就不推荐代购</p><p>Feral hosting：仅信用卡</p><h2 id="盒子的安装：-“盒子的安装：”-盒子的安装："><a href="#盒子的安装：-“盒子的安装：”-盒子的安装：" class="headerlink" title="[](# 盒子的安装： “盒子的安装：”) 盒子的安装："></a>[](# 盒子的安装： “盒子的安装：”) 盒子的安装：</h2><p>由于有些共享盒子没有提供 flexget 安装选项，而且几乎所有共享盒子都提供了 rTorrent+RuTorrent 的组合，你可以直接使用组合自带的 RSS 功能进行 RSS。</p><ol><li>首先在 rut 中添加 RSS 订阅</li></ol><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/Snipaste_2019-12-28_13-19-09.png)</p><ol start="2"><li>设置 RSS 自动下载规则</li></ol><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/Snipaste_2019-12-28_13-19-28.png)</p><p>这里的规则你可以自己写 怎么写清自行百度 我图上的规则意思是全部下载 并且不会自动在 rt 中自动开始下载。</p><ol start="3"><li><p>设置 deluge 监听目录到 <code>/home36/yezi/.config/.session</code></p></li><li><p>修改 rt 的 RSS 更新频率，在 webui 中仅能设置到 2min，修改文件可以修改到 1min</p></li></ol><p> 修改文件使得更新频率到 1min 方法:</p><p> <code>/home36/yezi/www/yezi.gold.seedhost.eu/yezi/rutorrent/plugins/rss/conf.php</code></p><p> <code>$minInterval = 1; //in minutes</code></p><h3 id="seedhost-deluge-刷新-tracker-脚本-“seedhost-deluge-刷新-tracker-脚本”-seedhost-deluge-刷新-tracker-脚本"><a href="#seedhost-deluge-刷新-tracker-脚本-“seedhost-deluge-刷新-tracker-脚本”-seedhost-deluge-刷新-tracker-脚本" class="headerlink" title="[](#seedhost-deluge 刷新 tracker 脚本 “seedhost deluge 刷新 tracker 脚本”) seedhost deluge 刷新 tracker 脚本"></a>[](#seedhost-deluge 刷新 tracker 脚本 “seedhost deluge 刷新 tracker 脚本”) seedhost deluge 刷新 tracker 脚本</h3><p><a href="https://www.seedhost.eu/whmcs/knowledgebase/266/Deluge-update-tracker-script.html">https://www.seedhost.eu/whmcs/knowledgebase/266/Deluge-update-tracker-script.html</a></p><h3 id="连接服务器：-“连接服务器：”-连接服务器："><a href="#连接服务器：-“连接服务器：”-连接服务器：" class="headerlink" title="[](# 连接服务器： “连接服务器：”) 连接服务器："></a>[](# 连接服务器： “连接服务器：”) 连接服务器：</h3><p>用法是使用 putty 或者 xshell 等连接上你的服务器，具体如何连接不赘述了，可以参考 <a href="https://jingyan.baidu.com/article/ed2a5d1f6b31af09f7be1748.html">https://jingyan.baidu.com/article/ed2a5d1f6b31af09f7be1748.html</a> 等之类的教程。</p><h3 id="限制同时进行下载的任务数：-“限制同时进行下载的任务数：”-限制同时进行下载的任务数："><a href="#限制同时进行下载的任务数：-“限制同时进行下载的任务数：”-限制同时进行下载的任务数：" class="headerlink" title="[](# 限制同时进行下载的任务数： “限制同时进行下载的任务数：”) 限制同时进行下载的任务数："></a>[](# 限制同时进行下载的任务数： “限制同时进行下载的任务数：”) 限制同时进行下载的任务数：</h3><p>考虑到有的时候我们需要进行全站 RSS，这个时候可能对我们的盒子性能有比较高的要求，我们观察后可以通过限制同时下载任务数稍微提升一点表现，但是由于目前删种的条件较难以控制，属于中下解。。。但也不是不能用。</p><p>qb+autoremove-torrents：</p><p> 设置当前最大任务数，所以同时加进去的种子会进入排队状态，而使用 autoremove-torrents 每分钟检查并且移除排队种子。如果对应站点有不少的低速种子可以在 qb 里设置若干速度以下排除排队。</p><p>随便写的一个配置文件 没上机测试过</p><pre class="line-numbers language-none"><code class="language-none">noob:  client: qbittorrent  host: http:&#x2F;&#x2F;127.0.0.1:2017  username: admin  password: adminadmin  strategies:    remove-queued:      status: queued      remove: ratio &lt; 1    avoid-boom:      seed_size:         limit: 6500        action: remove-old-seeds  delete_data: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移除所有排队的 ratio 小于 1 的种子（默认顺序是先加入的在队头</p><p>并且在所有种子的 size 大于 6500GiB 的时候开始移除老种子</p><h3 id="软件安装：-“软件安装：”-软件安装："><a href="#软件安装：-“软件安装：”-软件安装：" class="headerlink" title="[](# 软件安装： “软件安装：”) 软件安装："></a>[](# 软件安装： “软件安装：”) 软件安装：</h3><p>这部分 个人认为一般的刷子完全可以仅依赖星大的脚本: <a href="https://github.com/Aniverse/inexistence">https://github.com/Aniverse/inexistence</a></p><p>此时还可以大喊 efs 牛逼！ <a href="https://github.com/amefs/quickbox-lite">https://github.com/amefs/quickbox-lite</a></p><p>这两者的对比，前者更齐全，制种、发种工具一应俱全，后者有一个统一的 WEBUI 界面，而且大部分操作（卸载、安装、重启）可以在 webui 执行。</p><p>星大脚本：</p><p> 在 shell 中输入</p><pre class="line-numbers language-none"><code class="language-none">bash &lt;(wget --no-check-certificate -qO- https:&#x2F;&#x2F;github.com&#x2F;Aniverse&#x2F;inexistence&#x2F;raw&#x2F;master&#x2F;inexistence.sh)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车运行即可，在运行前请仔细阅读 GitHub 上的 readme，例如安装跳检客户端等等均有描述。</p><p>例如：</p><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/SwEej4gTFkGfI82.png)</p><p>需要提一嘴的是部分机子不提供 root 用户的登录，需要先使用你在后台设置的用户名密码登入然后使用 <code>su - root</code> 进行提权成为 root 用户，这样的厂商有 online.net &amp; oneprovider 等</p><h3 id="ipv6："><a href="#ipv6：" class="headerlink" title=" ipv6："></a><a href="#ipv6%EF%BC%9A" title="ipv6："></a> ipv6：</h3><p>部分用户可能有这个需求。</p><p>online:</p><p> online 在账户里有 ipv6 选项（新账号需要先 order 一个 free ipv6 block) 然后自己分 subnet。</p><p>oneprovider：</p><p>默认不会给 ipv6 地址块和 DUID，需要你新建一个 ticket 然后和客服交流获取。</p><p>和 oneprovider 客服交流过程举例：</p><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/ZWPSGTpLEe2uwjD.png)</p><p>配置 ipv6 脚本</p><pre class="line-numbers language-none"><code class="language-none">bash &lt;(wget -qO- https:&#x2F;&#x2F;github.com&#x2F;Aniverse&#x2F;aBox&#x2F;raw&#x2F;master&#x2F;scripts&#x2F;ipv6)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> scw/ik/lw 的 debian 8-10/ubuntu 16.04-18.04 配置（20.04 应该也可以，没试过，应该也是 netplan 吧）</p><p>手动配置:</p><p> ubuntu 18.04:</p><p> <a href="https://blog.gloriousdays.pw/2019/03/14/configure-online-net-ipv6-on-ubuntu-18-04/">https://blog.gloriousdays.pw/2019/03/14/configure-online-net-ipv6-on-ubuntu-18-04/</a></p><p> debian:</p><p> <a href="https://github.com/jxzy199306/ipv6_dhclient_online_net">https://github.com/jxzy199306/ipv6_dhclient_online_net</a></p><h3 id="服务器运行状态：-“服务器运行状态：”-服务器运行状态："><a href="#服务器运行状态：-“服务器运行状态：”-服务器运行状态：" class="headerlink" title="[](# 服务器运行状态： “服务器运行状态：”) 服务器运行状态："></a>[](# 服务器运行状态： “服务器运行状态：”) 服务器运行状态：</h3><p>综合状态判断：常见指令有 atop、htop 指令，但是如果需求不是很高而且想要一个好看的图形界面可以使用 gotop 具体可以参考我的 <a href="https://yukino.nl/2019/07/19/Gotop/">博文</a></p><p>硬盘状态判断：<code>iostat -dxm 1</code> 如果是安装了星大脚本的可以直接使用 <code>ios</code> ，查看最右侧数值为 0-100 的数值，若较高说明硬盘负载较大</p><p>由于 qbittorrent 的 webui 没有 RSS 功能，因此 RSS 要实现的话需要依赖其他软件，例如 flexget、rutorrent 的 RSS 功能，<a href="https://github.com/capric98/GoRSS">GORSS</a> 等其他软件实现。</p><p>flexget 可以由星大脚本（推荐）安装，或是手动安装。</p><p>手动安装：参考 <a href="https://linkthis.me/2018/02/15/the-note-of-using-flexget/">https://linkthis.me/2018/02/15/the-note-of-using-flexget/</a></p><p>配置文件个人认为星大的配置方法比较容易懂好上手</p><p>Link: <a href="https://github.com/Aniverse/WiKi/blob/master/Flexget.md">https://github.com/Aniverse/WiKi/blob/master/Flexget.md</a></p><p>其中 deluge 和 qbittorrent 的限速配置不同，均为限制单种上传 10000kb/s 下载 30000kb/s</p><pre class="line-numbers language-none"><code class="language-none">qbittorrent:  maxdownspeed: 30000  maxupspeed: 10000deluge:  max_down_speed: 30000  max_up_speed: 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于 flexget 的定时运行个人推荐 crontab 方式，频率不宜过高，flexget 每次 execute 会占用大量硬盘 io，很容易出现种子骤然掉速情况。</p><p>解决 flexget 的 io 占用有两个方式：</p><ol><li><p>开一台专门的机器负责 flexget，配置不需要太高，普通 vps 或者你科学上网使用的机器即可。</p></li><li><p>使用 <a href="https://github.com/capric98/GoRSS">GORSS</a> GORSS 是由 <a href="https://capriccio.moe/">capriccio</a> 开发的使用 go 编写的 rss 文件，支持 push 种子到 qb 和下载种子 deluge 的 watch folder</p></li></ol><p>2019.10.02 更新：</p><p>考虑不少人对于这个修改还是不太熟悉，就大致描述一下，一台刚装好星大脚本的机器需要干什么。</p><ol><li>登录进 flexget 的 webui 地址</li></ol><p>星大脚本默认是 <code>your_ip:6566</code></p><p>修改配置文件中的 tasks 部分</p><pre class="line-numbers language-none"><code class="language-none">templates:  freespace:    free_space:      path: &#x2F;home&#x2F;yezi      space: 10240  qb:    qbittorrent:      path: &#x2F;home&#x2F;yezi&#x2F;qbittorrent&#x2F;download&#x2F;       host: localhost      port: 2017      username: yezi      password: 123456  tr:    transmission:      path: &#x2F;home&#x2F;yezi&#x2F;transmission&#x2F;download&#x2F;       host: localhost      port: 9099      username: yezi      password: 123456  de:    deluge:      path: &#x2F;home&#x2F;yezi&#x2F;deluge&#x2F;download&#x2F;       host: localhost      port: 58846      username: yezi      password: 123456  size:    content_size:      min: 6000      max: 666666      strict: notasks:  tjupt:    rss: your_link     template:      - qb    content_size:      - min: 300     - max: 4000    qbittorrent:      label: tjupt       maxupspeed: 50000     accept_all: yes web_server:  port: 6566  web_ui: yesschedules: no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 <code>templates:</code> 是一些星大脚本自带的模板，一般是不需要进行修改的。</p><p>这样改完以后，有可能会 rss 到一些旧种子，你可以在 webui 的 execute 菜单进行如下操作，标记掉旧种子</p><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/WuQn9vpJHsSNa6U.png)</p><p>右侧勾选 learn 并且点击 execute 就会进行第一次运行且标记掉旧种子</p><ol start="2"><li>开启定时运行</li></ol><p>假设你运行在了 root 下，如果不是 root 下</p><p><code>sudo su -</code> 切换到 root</p><p>在 ssh 窗口输入 <code>crontab -e</code></p><p>默认会有个提示，问你用哪个文本编辑器，直接回车，使用 nano</p><pre class="line-numbers language-none"><code class="language-none">*&#x2F;2 * * * * &#x2F;usr&#x2F;local&#x2F;bin&#x2F;flexget --cron execute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最下或者其他任何地方加 上面代码块最后一行即可</p><p>然后 ctrl+x 退出编辑，编辑器会提问是否保存，输入 Y，回车就保存成功了，过 2 分钟在 ssh 里输入</p><p><code>flexget status</code> 查看 flexget 运行状态</p><p>这篇主要是给外站使用的，大部分使用在外站对应的 wiki 中均有，就不多谈了，配置较为简单，直接在 rutorrent 的 webui 中就可以配置，部分站点需要先去 irc 注册一下你的 bot 的 nick，具体请参考具体站点的 WiKi 等。</p><h3 id="文件传输：-“文件传输：”-文件传输："><a href="#文件传输：-“文件传输：”-文件传输：" class="headerlink" title="[](# 文件传输： “文件传输：”) 文件传输："></a>[](# 文件传输： “文件传输：”) 文件传输：</h3><p>星大脚本在安装 rt 的同时会安装 h5ai，h5ai 可以用于拖回单文件的情况，使用 idm 加大进程数可以有效提升拖回速度。</p><p>如果是多文件，可以采用 sftp 的方式拖回，但是 sftp 对单一文件只会使用单线程，传输较慢。</p><p>如果要传输文件至盒子上，也可以使用 sftp</p><p>当然可以使用网盘（onedrive 或者 google drive 进行中转）具体实现可以 google rclone</p><p>例如：</p><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/20210529084131.jpeg)</p><h3 id="优化：-“优化：”-优化："><a href="#优化：-“优化：”-优化：" class="headerlink" title="[](# 优化： “优化：”) 优化："></a>[](# 优化： “优化：”) 优化：</h3><p>我也不会，不要问我。</p><h3 id="自动移除种子及其数据：-“自动移除种子及其数据：”-自动移除种子及其数据："><a href="#自动移除种子及其数据：-“自动移除种子及其数据：”-自动移除种子及其数据：" class="headerlink" title="[](# 自动移除种子及其数据： “自动移除种子及其数据：”) 自动移除种子及其数据："></a>[](# 自动移除种子及其数据： “自动移除种子及其数据：”) 自动移除种子及其数据：</h3><p>我很懒，我不想手动删种，我想要程序自动删除某些符合条件的种子。</p><p>对于 qbittorrent 来说只能使用 <a href="https://github.com/jerrymakesjelly/autoremove-torrents">autoremove-torrents</a></p><p>对于 deluge 来说方案有两种，推荐前者，稳定且不易崩溃，后者崩溃概率较大</p><ol><li><p>使用 <a href="https://github.com/jerrymakesjelly/autoremove-torrents">autoremove-torrents</a></p></li><li><p>使用 <a href="https://github.com/omaralvarez/deluge-autoremoveplus">autoremoveplus</a></p></li></ol><p>前者的使用文档十分详细，且有中文，本文不复读了</p><p>后者的话是 deluge 的一个插件，星大脚本默认是安装了但是没启用，可以在 deluge 的 webui 设置里勾选此插件，配置还是比较丰富的。</p><p>![](Image/2021-05-29-PT - 实用工具 - 脚本分享.assets/7Kctoex3aIR1QfM.png)</p><p>我解释一下上图的配置文件，</p><p>check every： 每 T 天检查一次 0.0416 为大约一小时</p><p>Max.Torrents: 当 deluge 有 N 个种子时进行 check ，0 为无视当前有多少个种</p><p>Min.HDD Space：当硬盘剩下 M GB 进行 check，-1 为无视当前有多少空间。</p><p>所以结合起来就是，每 T 天进行一次检查，当且仅当有 N 个种，硬盘剩下 M GB 时进行后面对每个种子进行条件判断</p><p>条件可以有 2 条进行组合，比如图上就是移除已做种 0.042 天的种子。</p><p>examption rules 指的是部分类型的种子可以豁免删除</p><p>exampted torrents count toward maximun 指的是豁免种是否统计在 max torrents 里</p><p>remove torrents 指的是是否移除种子</p><p>remove torrent data 指的是是否移除种子下载的数据。</p><p>结合起来我的示例图是 当硬盘空间小于 150G 时每小时检查一次并且删除做种时间超过一小时的种及其数据。</p><h3 id="如何制种：-“如何制种：”-如何制种："><a href="#如何制种：-“如何制种：”-如何制种：" class="headerlink" title="[](# 如何制种： “如何制种：”) 如何制种："></a>[](# 如何制种： “如何制种：”) 如何制种：</h3><p>本人使用盒子制种较少，但是可以依赖星大脚本里的 <code>zuozhong</code> 命令制种，获取视频的 mediainfo 以及截图可以使用 <code>jietu</code> 命令，具体可以参考星大写的 readme</p><h3 id="如何管理客户端（重启等）-“如何管理客户端（重启等）”-如何管理客户端（重启等）"><a href="#如何管理客户端（重启等）-“如何管理客户端（重启等）”-如何管理客户端（重启等）" class="headerlink" title="[](# 如何管理客户端（重启等） “如何管理客户端（重启等）”) 如何管理客户端（重启等）"></a>[](# 如何管理客户端（重启等） “如何管理客户端（重启等）”) 如何管理客户端（重启等）</h3><p>使用星大脚本安装且勾选了 system tweaks 的可以使用 <code>mingling</code> 指令调出脚本菜单，根据菜单指引进行重启或者监视客户端</p><h3 id="共享盒子想装别的软件：-“共享盒子想装别的软件：”-共享盒子想装别的软件："><a href="#共享盒子想装别的软件：-“共享盒子想装别的软件：”-共享盒子想装别的软件：" class="headerlink" title="[](# 共享盒子想装别的软件： “共享盒子想装别的软件：”) 共享盒子想装别的软件："></a>[](# 共享盒子想装别的软件： “共享盒子想装别的软件：”) 共享盒子想装别的软件：</h3><p>可以使用星大写的脚本 (星大牛逼) <a href="https://github.com/Aniverse/iFeral">https://github.com/Aniverse/iFeral</a></p><h3 id="ARM-盒子如何配置：-“ARM-盒子如何配置：”-ARM-盒子如何配置："><a href="#ARM-盒子如何配置：-“ARM-盒子如何配置：”-ARM-盒子如何配置：" class="headerlink" title="[](#ARM 盒子如何配置： “ARM 盒子如何配置：”) ARM 盒子如何配置："></a>[](#ARM 盒子如何配置： “ARM 盒子如何配置：”) ARM 盒子如何配置：</h3><p>配置较低，建议使用 tr 或者 rt，可以参考 B 大的 <a href="https://blog.mabors.com/archives/armstorage.html">安装指南</a></p><h3 id="如何抓取免费种：-“如何抓取免费种：”-如何抓取免费种："><a href="#如何抓取免费种：-“如何抓取免费种：”-如何抓取免费种：" class="headerlink" title="[](# 如何抓取免费种： “如何抓取免费种：”) 如何抓取免费种："></a>[](# 如何抓取免费种： “如何抓取免费种：”) 如何抓取免费种：</h3><p><a href="https://github.com/Alvinnfly/promotion">https://github.com/Alvinnfly/promotion</a></p><p><a href="https://github.com/Juszoe/flexget-nexusphp">https://github.com/Juszoe/flexget-nexusphp</a></p><p>星大脚本 plugin 路径位置</p><p><code>~/.config/flexget/plugins</code></p><p>本人未使用过 也不知道怎么用 会不会被 ban 我也不知道</p><h3 id="Hetzner-RAID0-以及安装系统：-“Hetzner-RAID0-以及安装系统：”-Hetzner-RAID0-以及安装系统："><a href="#Hetzner-RAID0-以及安装系统：-“Hetzner-RAID0-以及安装系统：”-Hetzner-RAID0-以及安装系统：" class="headerlink" title="[](#Hetzner-RAID0 以及安装系统： “Hetzner-RAID0 以及安装系统：”) Hetzner-RAID0 以及安装系统："></a>[](#Hetzner-RAID0 以及安装系统： “Hetzner-RAID0 以及安装系统：”) Hetzner-RAID0 以及安装系统：</h3><p><a href="https://npchk.info/hetzner-raid0/">https://npchk.info/hetzner-raid0/</a></p><h3 id="手动编译安装-qbittorrent：-“手动编译安装-qbittorrent：”-手动编译安装-qbittorrent："><a href="#手动编译安装-qbittorrent：-“手动编译安装-qbittorrent：”-手动编译安装-qbittorrent：" class="headerlink" title="[](# 手动编译安装 qbittorrent： “手动编译安装 qbittorrent：”) 手动编译安装 qbittorrent："></a>[](# 手动编译安装 qbittorrent： “手动编译安装 qbittorrent：”) 手动编译安装 qbittorrent：</h3><p><a href="https://npchk.info/ubuntu-debian-install-qbittorrent/">https://npchk.info/ubuntu-debian-install-qbittorrent/</a></p><h3 id="开启-root-用户远程登录：-“开启-root-用户远程登录：”-开启-root-用户远程登录："><a href="#开启-root-用户远程登录：-“开启-root-用户远程登录：”-开启-root-用户远程登录：" class="headerlink" title="[](# 开启 root 用户远程登录： “开启 root 用户远程登录：”) 开启 root 用户远程登录："></a>[](# 开启 root 用户远程登录： “开启 root 用户远程登录：”) 开启 root 用户远程登录：</h3><p>一键版：完成后不会有提示</p><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;&#x2F;.*PermitRootLogin.*&#x2F;d&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config ; echo &#39;PermitRootLogin yes&#39; &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config ; &#x2F;etc&#x2F;init.d&#x2F;ssh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>手动版</p><p><code>sudo nano /etc/ssh/sshd_config</code></p><p>找到 <code>PermitRootLogin</code> 将其值修改为 yes</p><p>按 ctrl+X 保存并关闭文件，按 Y 确认保存文件，按 ENTER 退出 nano。</p><p>重启 sshd 服务</p><p><code>sudo systemctl restart ssh</code></p><h3 id="一些杂物：-“一些杂物：”-一些杂物："><a href="#一些杂物：-“一些杂物：”-一些杂物：" class="headerlink" title="[](# 一些杂物： “一些杂物：”) 一些杂物："></a>[](# 一些杂物： “一些杂物：”) 一些杂物：</h3><p>简介生成工具：<a href="https://github.com/BFDZ/PT-Gen">PT-GEN</a> &amp; <a href="https://github.com/Rhilip/pt-gen-cfworker">PT-GEN-cfworker</a></p><p> 不想自己部署的话可以使用：<a href="https://rhilip.github.io/PT-help/ptgen">https://rhilip.github.io/PT-help/ptgen</a></p><p> 或者我部署的 <a href="https://yezi.ga/">https://yezi.ga/</a></p><p> 注意一些站点要求图片不能使用豆瓣，请自行上传至网站服务器或者图床</p><p> R 酱的 PT-GEN 收录文章：<a href="https://blog.rhilip.info/archives/1063/">https://blog.rhilip.info/archives/1063/</a></p><p>常用图床：</p><p><a href="http://www.imagebam.com/">http://imagebam.com</a> 支持纯 porn 图片 自动生成缩略图</p><p><a href="https://imgbox.com/">https://imgbox.com/</a></p><p><a href="https://pixhost.to/">https://pixhost.to/</a> 支持 porn</p><p>已知要写的：</p><p>~1. 找人代购盒子或者自己购买需要注意的地方～好像也没啥能写的</p><p><del>2. 关于 vps 的一些 tips</del> 不想写了</p><ol start="3"><li><p>一些影视有关基础科普 太难了</p></li><li><p>重新优化结构 咕咕咕</p></li><li><p>一键上传至部分图床的脚本</p></li></ol><p>不知道还能写点什么，回头看了看自己写了啥，感觉都在解释一些常见用法，如果有什么想问的可以在评论区留言，记得填一个能联系到你的邮箱，这样如果其他人有回复了会有邮件提醒。</p><p>如果有错误部分请大力指出，</p><p>感谢观看 &amp; Thanks for everyone</p><p>本文发布于我的 <a href="https://yukino.nl/2019/08/10/pt-tools/">blog</a>，后续更新等均在 blog 里，转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> PT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始配置 PT 盒子</title>
      <link href="2021/05/28/cong-ling-kai-shi-pei-zhi-pt-he-zi/"/>
      <url>2021/05/28/cong-ling-kai-shi-pei-zhi-pt-he-zi/</url>
      
        <content type="html"><![CDATA[<p>我个人也是几天前才从一个对盒子和 Linux 一无所知的小白，转变到基本会用盒子的主要功能。不得不说有了大佬们的一键脚本后，几乎简化了绝大多数的流程。本文也权当是一个备忘和笔记，方便自己未来配置盒子的时候复制粘贴。</p><h2 id="一、选购"><a href="#一、选购" class="headerlink" title="一、选购"></a>一、选购</h2><p>关于盒子的挑选无非就两种：独服、共享盒子。</p><p>独服顾名思义就是指独立服务器，拥有独立使用的硬件配置、硬盘、IP，当然带宽不一定是独立使用的。购入机器后拥有 root 权限，需要自己从零开始配置。常见的独服有 OVH、Online、OneProvider、Hetzner 等，这些商家和服务器多在欧洲，所以购买时也尽量选择欧洲的服务器，互相之间的连接性会比较好。</p><p>共享盒子同样的就是指多人共享一套服务器配置，包括 IP 和带宽。商家往往都会帮你配置好 PT 相关的软件，可以说是即买即用，适合新手小白。但实际性能如何就要看人品了，如果跟你共享一个服务器的邻居大量占用系统资源，那你自己的性能就会很难看了。但如果人品好能占到多数的系统资源，那刷力也是不虚的。</p><p>如何选择当然要看个人的预算和需求，包括 PT 站本身的限制以及商家的付款方式和购买限制都要弄清楚，比如有的站就限制共享 IP，有的站又限制带宽。有的商家需要提供护照等身份证明才允许购买，有的商家选择相应的地区再提供身份证明可以免税。有的人倾向于大量保种，那就可以找低配大硬盘的机器，比如一些 ARM 架构 CPU 的机器。有的人倾向于刷流量，那对硬盘需求就没那么高，但其他配置和带宽要有保障。</p><p>由于我个人也是小白，这里也就不做推荐了，多百度谷歌已经有很多相关信息，建议是可以先买一个月低端便宜的独服练手再上好机器。以下以我在 OneProvider 买的法国巴黎 10 刀独服为例。</p><h2 id="二、主要配置"><a href="#二、主要配置" class="headerlink" title="二、主要配置"></a>二、主要配置</h2><p>成功购入服务器后就可以在商家的网站后台为服务器重装系统，一般只有 Linux 系统可选，这里选择 Ubuntu 18.04，此时可以设置账号密码，之后登陆就需要这个。</p><p>等待重装完毕后就会显示服务器的 IP 和账号密码，此时可以使用 SSH 软件登陆服务器，这里推荐 Xshell6。软件中输入服务器 IP，端口一般默认 22，连接后输入账号密码即可成功登陆服务器后台。</p><p>OneProvider 默认不提供 root 账户远程登陆，同时也不知道是不是我买的机器有问题，root 密码与我设置的账号密码不同，所以这里就需要重设 root 密码并开启 root 远程登陆。如果你的服务器已提供 root 远程登陆方式，可以无视这一步。</p><p>在网站的控制面板将服务器启动方式设为 rescue 模式，镜像选对应的就行，然后重启服务器。此时会给一个 rescue 模式用的账号密码，同样 SSH 输入账号密码，成功登陆服务器。</p><p>以下敲代码</p><pre class="line-numbers language-none"><code class="language-none">sudo fdisk -l #查看 root 所在的分区，假设为 &#x2F;dev&#x2F;sda3sudo mount &#x2F;dev&#x2F;sda3 &#x2F;mnt #挂载for d in dev sys run proc; do sudo mount --bind &#x2F;$d &#x2F;mnt&#x2F;$d; done #继续挂载sudo chroot &#x2F;mnt #进入原系统passwd root #修改密码 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上完成，网站控制面板将启动模式改回 normal，重启服务器。重启完毕，用原来的账号密码 SSH 登陆。</p><pre class="line-numbers language-none"><code class="language-none">su - #切换 root 账户，此时需要输入刚才设置的密码vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config #使用 vi 编辑器编辑 sshd_config 文件&#x2F;Permit #跳转到包含 & quot;Permit&quot; 的语句按下 i 进入编辑模式，用方向键移动光标，将 PermitRootLogin 这句后面的删除，改为 & quot;yes&quot;，按下 esc 退出编辑模式:wq #保存并退出 visudo service ssh restart #重启 ssh 服务 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 SSH 登陆服务器就不需要安装系统时设置的账户密码了，直接用账户名 root 和设置的密码即可登陆。</p><p>接下来在 root 账户下安装星大的一键脚本，包含了常用的 PT 软件、其他软件、配置，全自动安装。</p><pre class="line-numbers language-none"><code class="language-none">bash &lt;(wget --no-check-certificate -qO- https:&#x2F;&#x2F;github.com&#x2F;Aniverse&#x2F;inexistence&#x2F;raw&#x2F;master&#x2F;inexistence.sh)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里需要一连串设置，详情参考星大的项目主页：<a href="https://link.zhihu.com/?target=https://github.com/Aniverse/inexistence">https://github.com/Aniverse/inexistence</a></p><p>视服务器配置不同，全部安装完成需要十几分钟到半小时不等，耐心等待。安装完毕后会输出一系列 webui 的地址，理论上到这为止挑选一个客户端的 webui 地址复制到浏览器地址栏中即可开始刷刷刷。</p><h2 id="三、其他配置"><a href="#三、其他配置" class="headerlink" title="三、其他配置"></a>三、其他配置</h2><p>如果你安装了 rTorrent，那么就自动安装了 h5ai，浏览器输入 “IP 地址 /h5ai” 即可进入服务器的文件系统，这里可以利用 HTTP 下载的方式拖回服务器上的文件，配合 IDM 等多线程下载工具速度不会慢。</p><p>想要上传文件，可以使用诸如 FileZilla FTP Client 这样的 FTP 软件，同样使用 SFTP 的方式从 22 端口进入服务器，上传文件至任意目录（需要用 root 账户登录）</p><p>这里为了让速度更快，我们需要启用 BBR。在之前安装一键脚本时实际已经可以设置，不过那个是启用原版 BBR，如果想使用魔改版 BBR 或者锐速，可以尝试这个项目的脚本。当然，用什么版本好、实际效果如何需要自行测试，不同服务器都不一样。<a href="https://link.zhihu.com/?target=https://github.com/Aniverse/TrCtrlProToc0l">https://github.com/Aniverse/TrCtrlProToc0l</a></p><p>对于低端配置又共享大带宽的机器来说，没有其他问题的情况下限制网速的因素往往在于硬盘 IO 瓶颈，使用这个脚本可以对硬盘进行测速：<a href="https://link.zhihu.com/?target=https://github.com/amefs/fio-bench">https://github.com/amefs/fio-bench</a></p><pre class="line-numbers language-none"><code class="language-none">bash &lt;(wget -qO- https:&#x2F;&#x2F;github.com&#x2F;amefs&#x2F;fio-bench&#x2F;raw&#x2F;master&#x2F;fio-bench.sh -o &#x2F;dev&#x2F;null)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据测速结果，考虑对上传下载进行相应的限速。需要提醒的是，一些服务商限制了长时间高速使用流量，否则会进行限速，所以事前要搞清楚这些限制，提前自行做好限制。</p><p>星大一键脚本已自动安装 speedtest 脚本，想要进行网络测速可以直接运行以下命令。如果没有安装，可以参考这个项目：<a href="https://link.zhihu.com/?target=https://github.com/sivel/speedtest-cli">https://github.com/sivel/speedtest-cli</a></p><pre class="line-numbers language-none"><code class="language-none">pip install speedtest-cli #安装speedtest-cli --share #执行测速，--share 参数可将测速结果上传至 speedtest 官网并输出测速结果图片地址 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>想要全自动刷，自然少不了 RSS 自动订阅以及自动删种脚本。</p><p>星大一键脚本自动安装了 Flexget 用于 RSS 订阅 PT 站，同时启用了 webui。具体的配置参考项目主页的说明：<a href="https://link.zhihu.com/?target=https://github.com/Aniverse/WiKi/blob/master/Flexget.md">https://github.com/Aniverse/WiKi/blob/master/Flexget.md</a></p><p>各大 PT 站对种子都有各种各样的流量优惠，可以配合这个 Flexget 插件实现筛选订阅：<a href="https://link.zhihu.com/?target=https://github.com/Juszoe/flexget-nexusphp">https://github.com/Juszoe/flexget-nexusphp</a></p><p>有了自动订阅，当然还要有自动删除才能实现真正的全自动刷刷刷。以我个人使用的 qbittorrent 客户端为例，可以使用 Auto Remove Torrents 脚本，安装及配置方法如下：</p><p><a href="https://link.zhihu.com/?target=https://autoremove-torrents.readthedocs.io/zh_CN/latest/index.html">https://autoremove-torrents.readthedocs.io/zh_CN/latest/index.html</a></p><p>以上，即为从零开始配置 PT 盒子的全过程。本文没有涉及到 Linux 及 PT 客户端的优化，因为我自己也不懂，还望大佬们不吝赐教。</p>]]></content>
      
      
      <categories>
          
          <category> PT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov5 超详细的入门级教程 - 训练自制数据集</title>
      <link href="2021/05/15/yolov5-chao-xiang-xi-de-ru-men-ji-jiao-cheng-xun-lian-zi-zhi-shu-ju-ji/"/>
      <url>2021/05/15/yolov5-chao-xiang-xi-de-ru-men-ji-jiao-cheng-xun-lian-zi-zhi-shu-ju-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://blog.csdn.net/weixin_44145782/article/details/113983421?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">blog.csdn.net</a></p></blockquote><blockquote><p>这两天一直致力于利用 YOLOv3 的 Pytorch 版本进行模型的训练，奈何他的版本更新的太快，找了半天的 cfg 配置文件发现在最新版本里已经升级了。于是不断在 YOLOv3 和 YOLOv5 之间辗转。<br>决定从最简单的东西入手，一步一步来理解模型是怎样训练出来的，并且如何达到满意的效果。</p></blockquote><h1 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h1><ul><li><p>选择了一个检测鱼类的数据集，想要尝试自己去制作一个数据集。<br>  网站链接：<a href="https://swfscdata.nmfs.noaa.gov/labeled-fishes-in-the-wild/">Labeled Fishes in the Wild</a></p></li><li><p>选择了 60 张鱼类的图片，准备标注数据：<br>  <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171739.png"></p></li><li><p>由于自身强迫症，看着这些文件名太难受了，改成了 VOC 格式的 <code>000005.jpg</code> 命名方式，但是从 <code>000000.jpg</code> 开始，共 60 张。<br>  <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171746.png"><br>  换名代码如下，将 <code>path</code> 更改为你的图片存放路径。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">"C:/Users/Desktop/fish"</span>filelist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment"># 该文件夹下所有的文件（包括文件夹）</span>count<span class="token operator">=</span><span class="token number">0</span> <span class="token comment"># 从零开始 </span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>   <span class="token comment"># 遍历所有文件 </span>    Olddir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">)</span>   <span class="token comment"># 原来的文件路径 </span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>Olddir<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 如果是文件夹则跳过 </span>        <span class="token keyword">continue</span>    filename<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment"># 文件名 </span>    filetype<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment"># 文件扩展名 </span>    Newdir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>filetype<span class="token punctuation">)</span>  <span class="token comment"># 用字符串函数 zfill 以 0 补全所需位数 </span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>Olddir<span class="token punctuation">,</span>Newdir<span class="token punctuation">)</span><span class="token comment"># 重命名 </span>    count<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用 <code>精灵标注助手</code> 进行标注。新建一个 ** 位置标注项目 **，然后开始标注就好了（深海恐惧的我为什么要标这个东西，服气。。）<br>  <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171753.png"><br>  这里只建了一个分类，<code>fish</code>，从最简单的做起，先能识别鱼，再去做识别鱼的类别吧～～<br>  标完了，眼睛快瞎了，仿佛在玩找不同。<br>  导出成 xml 格式的文件存起来就可以了。（题主又导出了一份 pascal-voc 格式的 xml 文件～但是这个格式精灵标注助手不支持查看，所以就先导出了一份 xml 格式的）<br>  ![](Image/2021-05-15-Yolov5 超详细的入门级教程 - 训练自制数据集.assets/20210223134013391.png)<br>  <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171801.png"><br>  pascal-voc 格式的 xml 文件样例如下：</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>folder</span><span class="token punctuation">></span></span>fish<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>folder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filename</span><span class="token punctuation">></span></span>000052.JPG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filename</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>C:\Users\Vanessa Ni\Desktop\fish\000052.JPG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">></span></span>Unknown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>width</span><span class="token punctuation">></span></span>1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>width</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>height</span><span class="token punctuation">></span></span>768<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>height</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>depth</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>depth</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>size</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>segmented</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>segmented</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fish<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pose</span><span class="token punctuation">></span></span>Unspecified<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>truncated</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>truncated</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>difficult</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>difficult</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bndbox</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmin</span><span class="token punctuation">></span></span>498<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymin</span><span class="token punctuation">></span></span>227<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmax</span><span class="token punctuation">></span></span>696<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmax</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymax</span><span class="token punctuation">></span></span>350<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymax</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bndbox</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fish<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pose</span><span class="token punctuation">></span></span>Unspecified<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>truncated</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>truncated</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>difficult</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>difficult</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bndbox</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmin</span><span class="token punctuation">></span></span>225<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymin</span><span class="token punctuation">></span></span>602<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xmax</span><span class="token punctuation">></span></span>336<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xmax</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ymax</span><span class="token punctuation">></span></span>749<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ymax</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bndbox</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotation</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此为止，数据集标注的工作就完成。我们现在手头有：</p><ul><li>  原始数据集的 jpg 图片</li><li>  图片标注对应的 xml 文件</li><li>  图片标注对应的 pascal-voc 格式的 xml 文件</li></ul><h1 id="数据集制作"><a href="#数据集制作" class="headerlink" title="数据集制作"></a>数据集制作</h1><ul><li><p>在 <code>yolov5/data</code> 文件下创建如下文件目录<br>  <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171811.png"></p></li><li><p>  将所有的图片放到 <code>JPEGImages</code> 文件夹下，将所有个 pascal-voc 格式的 xml 文件放入到 <code>Annotations</code> 文件夹下</p></li><li><p>  在根目录下创建 <code>make_txt.py</code> 文件，代码如下，运行代码后 <code>ImageSets</code> 中生成数据集分类 txt 文件。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> randomtrainval_percent <span class="token operator">=</span> <span class="token number">0.1</span>train_percent <span class="token operator">=</span> <span class="token number">0.9</span>xmlfilepath <span class="token operator">=</span> <span class="token string">'data/Annotations'</span>txtsavepath <span class="token operator">=</span> <span class="token string">'data/ImageSets'</span>total_xml <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>xmlfilepath<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>total_xml<span class="token punctuation">)</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>tv <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">*</span> trainval_percent<span class="token punctuation">)</span>tr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tv <span class="token operator">*</span> train_percent<span class="token punctuation">)</span>trainval <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> tv<span class="token punctuation">)</span>train <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>trainval<span class="token punctuation">,</span> tr<span class="token punctuation">)</span>ftrainval <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/ImageSets/trainval.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>ftest <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/ImageSets/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>ftrain <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/ImageSets/train.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>fval <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/ImageSets/val.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> total_xml<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span>    <span class="token keyword">if</span> i <span class="token keyword">in</span> trainval<span class="token punctuation">:</span>        ftrainval<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token keyword">in</span> train<span class="token punctuation">:</span>            ftest<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fval<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ftrain<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name<span class="token punctuation">)</span>ftrainval<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ftrain<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>fval<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ftest<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行以上代码，可以得到的结果是，在 <code>ImageSets</code> 中有我们的数据集分类：</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171815.png"></p><ul><li>根目录下继续创建 <code>voc_label.py</code> 文件，代码如下：<br>  需要注意的是，sets 中改为你的 sets 的名字（make_txt 生成的）<br>  classes 修改为你需要检测的类别，在本案例中，我们只需要检测 <code>fish</code> 一种类别</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ET<span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">from</span> os <span class="token keyword">import</span> listdir<span class="token punctuation">,</span> getcwd<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> joinsets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">]</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fish'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>    dw <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">/</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dh <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">/</span> size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>    w <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> dw    w <span class="token operator">=</span> w <span class="token operator">*</span> dw    y <span class="token operator">=</span> y <span class="token operator">*</span> dh    h <span class="token operator">=</span> h <span class="token operator">*</span> dh    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">convert_annotation</span><span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    in_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/Annotations/% s.xml'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    out_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/labels/% s.txt'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>in_file<span class="token punctuation">)</span>    root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>    size <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">)</span>    w <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> obj <span class="token keyword">in</span> root<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        difficult <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'difficult'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        cls <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> classes <span class="token keyword">or</span> <span class="token builtin">int</span><span class="token punctuation">(</span>difficult<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        cls_id <span class="token operator">=</span> classes<span class="token punctuation">.</span>index<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        xmlbox <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'bndbox'</span><span class="token punctuation">)</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'xmin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'xmax'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ymin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ymax'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        bb <span class="token operator">=</span> convert<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>        out_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cls_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> bb<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>wd <span class="token operator">=</span> getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token keyword">for</span> image_set <span class="token keyword">in</span> sets<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'data/labels/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'data/labels/'</span><span class="token punctuation">)</span>    image_ids <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/ImageSets/% s.txt'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    list_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/% s.txt'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image_id <span class="token keyword">in</span> image_ids<span class="token punctuation">:</span>        list_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'data/images/% s.jpg\n'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">)</span>        convert_annotation<span class="token punctuation">(</span>image_id<span class="token punctuation">)</span>    list_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行以上代码后，可以发现生成了 voc 格式的标签文件 <code>labels</code>（显示数据集的具体标注数据），并且在 data 文件下出现了 train、val、test 的 txt 文件，保存了图片的路径。（带有图片的路径）<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171823.png"></p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171853.png"><br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171905.png"><br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171911.png"><br>至此，我们的数据集就全部做完啦！！！~~</p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><h2 id="修改-coco-yaml-文件"><a href="#修改-coco-yaml-文件" class="headerlink" title="修改 coco.yaml 文件"></a>修改 coco.yaml 文件</h2><p>这里的 **yaml 和以往的 cfg 文件 ** 是差不多的，但需要配置一份属于自己数据集的 yaml 文件。<br>复制 data 目录下的 coco.yaml，我这里命名为 fish.yaml<br>主要修改三个地方：<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171918.png"><br>a. 修改 train,val,test 的路径为自己 ** 刚刚生成的路径 **<br>b. nc 里的数字代表 ** 数据集的类别 **，我这里只有鱼一类，所以修改为 1<br>c. names 里为自己数据集标注的 ** 类名称 **，我这里是’fish’</p><h2 id="修改-model-yaml-文件"><a href="#修改-model-yaml-文件" class="headerlink" title="修改 model.yaml 文件"></a>修改 model.yaml 文件</h2><p>models 下有四个模型，smlx 需要训练的时间依次增加，按照需求选择一个文件进行修改即可。<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171925.png"><br>这里修改了 yolov5s.yaml，只需要将 nc 的类别修改为自己需要的即可<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171930.png"></p><h1 id="训练-train-py"><a href="#训练-train-py" class="headerlink" title="训练 train.py"></a>训练 train.py</h1><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171937.png"><br>weights，yaml，data 按照自己所需文件的路径修改即可<br>epochs 迭代次数自己决定，我这里仅用 100 次进行测试<br>batch-size 过高可能会影响电脑运行速度，还是要根据自己电脑硬件条件决定增加还是减少<br>修改完成，运行即可！ <code>python train.py</code><br>在训练过程的可视化 tensorboard <code>tensorboard --logdir runs/train</code><br>然后打开 <code>localhost:6006</code> 即可，效果如下：<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171942.png"><br>此次训练用了半个小时多一点，数据量比较小所以笔记本的垃圾显卡跑起来也还行。<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171952.png"><br>yolov5 就是很不错，调用了很多工具库来进行可视化！！所以最近几年的论文和代码应该都会有很多新的工具能用，等待着我们去探索～以下是训练完成后所有模型自动保存的数据：<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172000.png"><br>可以看到我们的权重文件就在这里安安静静的躺着:<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172006.png"></p><h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><ol><li>跑起来了也没有报错，但是一直卡在这个界面，显示完了超参数也不进入训练状态，打开 tensorboard 显示没有训练数据。<br> <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172010.png"><br> batch_size 设小一点，input 设置小一点：</li></ol><ul><li>  我刚开始取得 batch_size 是 16（没错我的笔记本就是如此的垃圾）</li><li>inputsize 取得 6000X2000（因为之前想要完成的任务是要做焊缝识别的，图片数据的分辨率比较特殊，暴力的修改了 inputsize 然后忘记修改了）<br>  最终导致了直接卡死～所以说深度学习真的很依赖于硬件配置哦</li></ul><ol start="2"><li><p> train.py 中的一个路径名写错了 <code>weights\yolov5s.pt</code> 写成了 <code>weight\yolov5s.pt</code> 可以说是非常容易犯的错误，但是报错很清晰也很容易修改～要注重细节。</p></li><li><p> 刚开始进入训练时好像也报了一些错，可能是某些工具库我没有安装，或者其他的一些 warning，我会再利用远程服务器进行训练的文章中再分析一下。</p></li></ol><h1 id="测试-detect-py"><a href="#测试-detect-py" class="headerlink" title="测试 detect.py"></a>测试 detect.py</h1><ul><li><code>python detect.py --weights runs/train/exp9/weights/best.pt --source data/Samples/--device 0 --save-txt</code><br>  <img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172017.png"></li></ul><p>结果如下：<img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172024.png"><br>？？？他在测什么？？？？居然把岩石都当成鱼了。。。。。<br>可能跟我选取得数据有关系。所以说数据集是非常非常影响最终模型的性能的</p><p>我们换一个比较简单的 sample 来继续试一试</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172035.png"><br>有些图片我标注出了很多个模糊的鱼，现在他测出来的结果可以说是非常不准确了。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515172048.png"><br>这个数据集里还有很多这样的椒盐背景的单物体图片，只不过所占的比例非常小，但是在我选取数据集的时候，我选用了非常多的这个类型的图片，由于数据集的数量较少，非常影响最终的结果。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>我是非常相信 <code>YOLOv5</code> 模型的性能的，训练方法和数据集都会在很大的程度上影响最终模型的性能。<br>我参考的博主做的训练最终结果是非常可观的。<br>所以在接下来的优化中，我会进行以下操作：</p><ul><li>制作 / 寻找更完善的数据集：数据集的制作是非常重要的！！！！主要关注以下几点<ol><li> 数据集的数量：图片的多少</li><li> 数据集的 ** 质量 **：选用什么样的数据来更好的完成任务。在原始的数据集中，（鱼类数据集）可以看到有不同类别的图片，其中还参杂了一些岩石的图片来喂给模型以区别出鱼类和岩石的区别，（尤其是在自然场景下，有的鱼很容易和岩石、背景融为一体，难以分辨）</li><li>** 数据增强 ** 操作：对于图像的预处理，利用 opencv 对于图像做一些基本的数据增强操作，来扩充数据集的数量，提升质量，都是很关键的步骤。<br> （我这里用的数据集数目很少，质量也很差劲，所以效果不好是明摆的事情）<br> 对于深度学习来说，数据集就像是我们平时所做软件的代码一样关键，（从一篇 paper 上看到的）！！！！！！</li></ol></li><li>利用更好的硬件来进行模型的训练：在训练参数的设置过程中，受限于电脑配置的影响，我将 batchsize 调成了 1，并且 ** 输入图片的大小 ** 也和训练图片有所出入（输入图片的大小是解决问题的关键！！尤其是对于焊缝项目，归根结底还是数据集怎么制作，怎么去处理这些数据）<ol><li> 在接下来的教程中我将利用实验室的服务器进行数据训练。</li></ol></li><li>  训练的方法：超参数的设定也是一门学问。极大的影响模型的性能</li></ul><p>在完成以上三点改进之后，我才会继续专注于</p><ul><li>  模型的改进：网络结构的改进、优化算法的选择、损失函数的选择等等。</li></ul><p>本次的教程就到此为止啦～虽然最终训练的模型性能不是很好，但是毕竟也是人生中的第二个模型（第一个模型是 lenet-5 helloworld 级别的训练！）<br>BUT!!!<br>性能不好意味着改进的可能，意味着能够看到更多影响模型的重要因素！！！<br>我认为这比一帆风顺的训练结果蕴含了更多的价值。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>参考了以下博主的博客，如有问题私信联系我，我会更改或撤除引用的部分。</p><ol><li> YOLOV5 训练自己的数据集（踩坑经验之谈）<a href="https://blog.csdn.net/a_cheng_/article/details/111401500">https://blog.csdn.net/a_cheng_/article/details/111401500</a> 这篇强推，本篇文章也是基于这篇文章进行补充的，看了很多经验贴，只有这篇最清晰（可能由于时间的推进吧，手里拿着 YOLOv5 的代码去看 YOLOv3 的经验贴，不晕才怪）</li><li> <a href="https://www.cnblogs.com/magicc/p/6490566.html">使用 SSH 命令行传输文件到远程服务器</a> 向远程服务器传输文件</li><li> 训练中突然停止，也不报错，就一直停在那里 <a href="https://github.com/bubbliiiing/yolov4-pytorch/issues/49">https://github.com/bubbliiiing/yolov4-pytorch/issues/49</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho 搭建教程</title>
      <link href="2021/04/21/typecho-da-jian-jiao-cheng/"/>
      <url>2021/04/21/typecho-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Typecho 是国内开发者开发的一款开源免费的动态博客程序，可以运行在基于 PHP 环境的各种平台上。</p><ul><li>官网：<a href="http://typecho.org/">Typecho Official Site</a></li><li>GitHub：<a href="https://github.com/typecho/typecho">typecho/typecho: A PHP Blogging Platform. Simple and Powerful. (github.com)</a></li></ul><p>Typecho 的一大特点就是 “精简”，全部文件不足 500KB，但却也实现了完整的主题和插件支持。博客程序很轻量，资源占用也很低，原生支持 Markdown 语法，省心并且简洁。本文就介绍下如何在自己的 VPS 上搭建 Typecho 博客。</p><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><p>安装宝塔 Linux 面板，宝塔官网：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><p><strong>Ubuntu/Deepin 安装命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Centos 安装命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中间需要进行 “确认”，输入 Y 回车即可。安装完成会显示登录信息，包括面板地址、用户名和密码。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171214.png"></p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171220.png"></p><p>打开浏览器进入面板，会提示安装 LNMP。PHP 版本改为 7.1，点击 “一键安装”，等待网站环境安装完成。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171226.png"></p><h2 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h2><ol><li>点击右侧的 ** 网站 **。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171236.png"></p><ol start="2"><li>添加站点</li></ol><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171242.png"></p><ol start="3"><li>按要求填写，并同时新建数据库。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171251.png"></p><h2 id="安装-Typecho"><a href="#安装-Typecho" class="headerlink" title="安装 Typecho"></a>安装 Typecho</h2><p>进入 <a href="https://link.zhihu.com/?target=http://typecho.org/">Typecho</a> 官网，下载安装包。建议下载正式版。</p><p>打开网站管理页面，进入网站目录，把该目录中的现有文件全部删除。然后把 Typecho 文件压缩包上传到网站目录中并解压，解压后出现 build 文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171304.gif"></p><p>把 build 文件夹中的文件全部复制到 <a href="http://baidu.com/">http://baidu.com</a> 文件夹中，然后删除 build 文件夹 和 Typecho 压缩包。</p><p>浏览器访问 <code>域名 /install.php</code> 或者 <code>IP:Port/install.php</code>，按提示完成 Typecho 配置。我们按照宝塔页面的数据库信息填写，其余的用户名，密码及邮箱自行填写即可。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171316.png"></p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171323.png"></p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171332.png"></p><p><strong>Typecho 博客搭建完成！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04 aria2 安装</title>
      <link href="2021/04/21/ubuntu-18.04-aria2-an-zhuang/"/>
      <url>2021/04/21/ubuntu-18.04-aria2-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/aria2/aria2">Aria2 官网</a><br><a href="https://aria2.github.io/manual/en/html/aria2c.html">Aria2 手册</a><br><a href="http://aria2c.com/usage.html">Aria2.conf 参考</a></p><p>[Linux screen 命令](<a href="https://www.runoob.com/linux/linux-comm-screen.html">Linux screen 命令 | 菜鸟教程 (runoob.com)</a>)</p><h2 id="宝塔安装"><a href="#宝塔安装" class="headerlink" title="宝塔安装"></a>宝塔安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="aria2-安装"><a href="#aria2-安装" class="headerlink" title="aria2 安装"></a>aria2 安装</h2><h3 id="1、Aria2-配置文件"><a href="#1、Aria2-配置文件" class="headerlink" title="1、Aria2 配置文件"></a>1、Aria2 配置文件</h3><p>参考 Aria2 官方配置文件修改，并上传至服务器。</p><h3 id="2、在-ssh-里输入命令安装-aria2"><a href="#2、在-ssh-里输入命令安装-aria2" class="headerlink" title="2、在 ssh 里输入命令安装 aria2:"></a>2、在 ssh 里输入命令安装 aria2:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> aria2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后，解压刚刚上传到服务器的配置文件，修改 aria2.conf 内的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpc-secret<span class="token function">dir</span>on-download-complete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后使用 aria2 命令运行配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> aria2 目录aria2c --conf-path<span class="token operator">=</span><span class="token string">"aria2.conf"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这个时候，关闭 ssh，aria2 服务也会关闭。<br>解决方法：<br>使用 screen 后台运行 aria2:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">screen</span><span class="token function">screen</span> -R aria2aria2c --conf-path<span class="token operator">=</span><span class="token string">"aria2.conf"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后按 ctril+c，再按 d。以后再次进入该 screen:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> -R aria2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>** 放行端口：6800**</p><h3 id="3、搭建网页前端-——AriaNg"><a href="#3、搭建网页前端-——AriaNg" class="headerlink" title="3、搭建网页前端 ——AriaNg"></a>3、搭建网页前端 ——AriaNg</h3><p>AriaNg 是一个能让强大的命令行下载工具 aria2 更容易使用的 Web 客户端，只需下载后用浏览器打开即可，无需安装、无需配置。</p><p>项目地址（GitHub）： <a href="https://github.com/mayswind/AriaNg/releases">https://github.com/mayswind/AriaNg/releases</a></p><p>下面开始搭建，我是用宝塔面板搭建（有一种可视化搭建的感觉）：</p><p>首先，添加网站：<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171347.jpg"><br>然后，到自己网站的文件夹里，离线下载 AriaNg 的压缩包：<br>![img](Image/2021-04-21-Ubuntu 18.04 aria2 安装.assets/addWeb1-20210410222315882.jpg)<br><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171353.jpg"><br>下载好后解压到你网站目录。<br>最后，进入你的域名，输入密钥。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171401.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04 rclone 挂载 Onedrive</title>
      <link href="2021/04/19/ubuntu-18.04-rclone-gua-zai-onedrive/"/>
      <url>2021/04/19/ubuntu-18.04-rclone-gua-zai-onedrive/</url>
      
        <content type="html"><![CDATA[<h2 id="一、获取授权密钥"><a href="#一、获取授权密钥" class="headerlink" title="一、获取授权密钥"></a>一、获取授权密钥</h2><p>在本地安装 rclone 客户端</p><p>在 rclone 官网 <a href="https://rclone.org/downloads/">https://rclone.org/downloads/</a> 下载适用于 Windows 的最新版客户端，解压到磁盘当中，将文件夹重命名为 rc（方便以下操作。。）。按住键盘上 win+R 输入 powershell 打开命令行，执行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> 目录 <span class="token comment"># 如果解压在其他盘只需相应替换盘符即可 </span>.<span class="token punctuation">\</span>rclone authorize <span class="token string">"onedrive"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时会弹出一个验证页面，在此登陆你的 onedrive 账户完成授权即可在 powershell 中获取密钥，如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS D:<span class="token punctuation">\</span>rc<span class="token operator">></span> .<span class="token punctuation">\</span>rclone authorize <span class="token string">"onedrive"</span>If your browser doesn't <span class="token function">open</span> automatically go to the following link: http://127.0.0.1:53682/auth?state<span class="token operator">=</span>xxxxLog <span class="token keyword">in</span> and authorize rclone <span class="token keyword">for</span> accessWaiting <span class="token keyword">for</span> code<span class="token punctuation">..</span>.Got codePaste the following into your remote machine ---<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">"access_token"</span><span class="token builtin class-name">:</span><span class="token string">"auth"</span>,<span class="token string">"expiry"</span><span class="token builtin class-name">:</span><span class="token string">"2020-01-28T21:59:50.7394539+08:00"</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 完整复制此步给出的密钥包括 &#123;---&#125; 之间的所有内容。</span><span class="token operator">&lt;</span>---End <span class="token function">paste</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、服务器配置"><a href="#二、服务器配置" class="headerlink" title="二、服务器配置"></a>二、服务器配置</h2><h3 id="1-安装-rclone"><a href="#1-安装-rclone" class="headerlink" title="1. 安装 rclone"></a>1. 安装 rclone</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://rclone.org/install.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>   <span class="token comment">#rclone on Linux/macOS/BSD systems</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置-rclone"><a href="#2-配置-rclone" class="headerlink" title="2. 配置 rclone"></a>2. 配置 rclone</h3><p>初始化 rclone 并执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rclone config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照如下提示进行，此步骤的一些步骤会因为 rclone 版本更新出现不同，但总体安装过程和选项相似，请依据现在安装的版本进行。</p><p>在获取密钥匙务必确保本地客户端和服务器上的 rclone 版本一致，否则可能出现错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">e<span class="token punctuation">)</span> Edit existing remoten<span class="token punctuation">)</span> New remoted<span class="token punctuation">)</span> Delete remoter<span class="token punctuation">)</span> Rename remotec<span class="token punctuation">)</span> Copy remotes<span class="token punctuation">)</span> Set configuration passwordq<span class="token punctuation">)</span> Quit confige/n/d/r/c/s/q<span class="token operator">></span> n <span class="token comment"># 创建新的 remote</span>name<span class="token operator">></span> <span class="token builtin class-name">test</span> <span class="token comment"># 输入名称 </span>Type of storage to configure.Enter a string value. Press Enter <span class="token keyword">for</span> the default <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>.Choose a number from below, or <span class="token builtin class-name">type</span> <span class="token keyword">in</span> your own value <span class="token number">1</span> / 1Fichier   <span class="token punctuation">\</span> <span class="token string">"fichier"</span> <span class="token number">2</span> / Alias <span class="token keyword">for</span> an existing remote   <span class="token punctuation">\</span> <span class="token string">"alias"</span> <span class="token number">3</span> / Amazon Drive   <span class="token punctuation">\</span> <span class="token string">"amazon cloud drive"</span> <span class="token number">4</span> / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS   <span class="token punctuation">\</span> <span class="token string">"s3"</span> <span class="token number">5</span> / Backblaze B2   <span class="token punctuation">\</span> <span class="token string">"b2"</span> <span class="token number">6</span> / Box   <span class="token punctuation">\</span> <span class="token string">"box"</span> <span class="token number">7</span> / Cache a remote   <span class="token punctuation">\</span> <span class="token string">"cache"</span> <span class="token number">8</span> / Citrix Sharefile   <span class="token punctuation">\</span> <span class="token string">"sharefile"</span> <span class="token number">9</span> / Compress a remote   <span class="token punctuation">\</span> <span class="token string">"compress"</span><span class="token number">10</span> / Dropbox   <span class="token punctuation">\</span> <span class="token string">"dropbox"</span><span class="token number">11</span> / Encrypt/Decrypt a remote   <span class="token punctuation">\</span> <span class="token string">"crypt"</span><span class="token number">12</span> / Enterprise File Fabric   <span class="token punctuation">\</span> <span class="token string">"filefabric"</span><span class="token number">13</span> / FTP Connection   <span class="token punctuation">\</span> <span class="token string">"ftp"</span><span class="token number">14</span> / Google Cloud Storage <span class="token punctuation">(</span>this is not Google Drive<span class="token punctuation">)</span>   <span class="token punctuation">\</span> <span class="token string">"google cloud storage"</span><span class="token number">15</span> / Google Drive   <span class="token punctuation">\</span> <span class="token string">"drive"</span><span class="token number">16</span> / Google Photos   <span class="token punctuation">\</span> <span class="token string">"google photos"</span><span class="token number">17</span> / Hadoop distributed <span class="token function">file</span> system   <span class="token punctuation">\</span> <span class="token string">"hdfs"</span><span class="token number">18</span> / Hubic   <span class="token punctuation">\</span> <span class="token string">"hubic"</span><span class="token number">19</span> / In memory object storage system.   <span class="token punctuation">\</span> <span class="token string">"memory"</span><span class="token number">20</span> / Jottacloud   <span class="token punctuation">\</span> <span class="token string">"jottacloud"</span><span class="token number">21</span> / Koofr   <span class="token punctuation">\</span> <span class="token string">"koofr"</span><span class="token number">22</span> / Local Disk   <span class="token punctuation">\</span> <span class="token string">"local"</span><span class="token number">23</span> / Mail.ru Cloud   <span class="token punctuation">\</span> <span class="token string">"mailru"</span><span class="token number">24</span> / Mega   <span class="token punctuation">\</span> <span class="token string">"mega"</span><span class="token number">25</span> / Microsoft Azure Blob Storage   <span class="token punctuation">\</span> <span class="token string">"azureblob"</span><span class="token number">26</span> / Microsoft OneDrive   <span class="token punctuation">\</span> <span class="token string">"onedrive"</span><span class="token number">27</span> / OpenDrive   <span class="token punctuation">\</span> <span class="token string">"opendrive"</span><span class="token number">28</span> / OpenStack Swift <span class="token punctuation">(</span>Rackspace Cloud Files, Memset Memstore, OVH<span class="token punctuation">)</span>   <span class="token punctuation">\</span> <span class="token string">"swift"</span><span class="token number">29</span> / Pcloud   <span class="token punctuation">\</span> <span class="token string">"pcloud"</span><span class="token number">30</span> / Put.io   <span class="token punctuation">\</span> <span class="token string">"putio"</span><span class="token number">31</span> / QingCloud Object Storage   <span class="token punctuation">\</span> <span class="token string">"qingstor"</span><span class="token number">32</span> / SSH/SFTP Connection   <span class="token punctuation">\</span> <span class="token string">"sftp"</span><span class="token number">33</span> / Sugarsync   <span class="token punctuation">\</span> <span class="token string">"sugarsync"</span><span class="token number">34</span> / Tardigrade Decentralized Cloud Storage   <span class="token punctuation">\</span> <span class="token string">"tardigrade"</span><span class="token number">35</span> / Transparently chunk/split large files   <span class="token punctuation">\</span> <span class="token string">"chunker"</span><span class="token number">36</span> / Union merges the contents of several upstream fs   <span class="token punctuation">\</span> <span class="token string">"union"</span><span class="token number">37</span> / Webdav   <span class="token punctuation">\</span> <span class="token string">"webdav"</span><span class="token number">38</span> / Yandex Disk   <span class="token punctuation">\</span> <span class="token string">"yandex"</span><span class="token number">39</span> / Zoho   <span class="token punctuation">\</span> <span class="token string">"zoho"</span><span class="token number">40</span> /http Connection   <span class="token punctuation">\</span> <span class="token string">"http"</span><span class="token number">41</span> /premiumize.me   <span class="token punctuation">\</span> <span class="token string">"premiumizeme"</span><span class="token number">42</span> /seafile   <span class="token punctuation">\</span> <span class="token string">"seafile"</span>Storage<span class="token operator">></span> <span class="token number">26</span> <span class="token comment"># 不同版本选择不同，此版本 Onedrive 为 26，可以自行选择 </span>** See <span class="token builtin class-name">help</span> <span class="token keyword">for</span> onedrive backend at: https://rclone.org/onedrive/ **OAuth Client IdLeave blank normally.Enter a string value. Press Enter <span class="token keyword">for</span> the default <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>.client_id<span class="token operator">></span> OAuth Client SecretLeave blank normally.Enter a string value. Press Enter <span class="token keyword">for</span> the default <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>.client_secret<span class="token operator">></span> Choose national cloud region <span class="token keyword">for</span> OneDrive.Enter a string value. Press Enter <span class="token keyword">for</span> the default <span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">)</span>.Choose a number from below, or <span class="token builtin class-name">type</span> <span class="token keyword">in</span> your own value <span class="token number">1</span> / Microsoft Cloud Global   <span class="token punctuation">\</span> <span class="token string">"global"</span> <span class="token number">2</span> / Microsoft Cloud <span class="token keyword">for</span> US Government   <span class="token punctuation">\</span> <span class="token string">"us"</span> <span class="token number">3</span> / Microsoft Cloud Germany   <span class="token punctuation">\</span> <span class="token string">"de"</span> <span class="token number">4</span> / Azure and Office <span class="token number">365</span> operated by 21Vianet <span class="token keyword">in</span> China   <span class="token punctuation">\</span> <span class="token string">"cn"</span>region<span class="token operator">></span> <span class="token number">1</span> <span class="token comment"># 一般选择 1 或根据自己的类型选择 </span>Edit advanced config? <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>y<span class="token punctuation">)</span> Yesn<span class="token punctuation">)</span> No <span class="token punctuation">(</span>default<span class="token punctuation">)</span>y/n<span class="token operator">></span> nRemote configUse auto config? * Say Y <span class="token keyword">if</span> not sure * Say N <span class="token keyword">if</span> you are working on a remote or headless machiney<span class="token punctuation">)</span> Yes <span class="token punctuation">(</span>default<span class="token punctuation">)</span>n<span class="token punctuation">)</span> Noy/n<span class="token operator">></span> nFor this to work, you will need rclone available on a machine that hasa web browser available.For <span class="token function">more</span> <span class="token builtin class-name">help</span> and alternate methods see: https://rclone.org/remote_setup/Execute the following on the machine with the web browser <span class="token punctuation">(</span>same rcloneversion recommended<span class="token punctuation">)</span>:rclone authorize <span class="token string">"onedrive"</span>Then <span class="token function">paste</span> the result below:result<span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Choose a number from below, or <span class="token builtin class-name">type</span> <span class="token keyword">in</span> an existing value <span class="token number">1</span> / OneDrive Personal or Business   <span class="token punctuation">\</span> <span class="token string">"onedrive"</span> <span class="token number">2</span> / Root Sharepoint site   <span class="token punctuation">\</span> <span class="token string">"sharepoint"</span> <span class="token number">3</span> / Sharepoint site name or URL <span class="token punctuation">(</span>e.g. mysite or https://contoso.sharepoint.com/sites/mysite<span class="token punctuation">)</span>   <span class="token punctuation">\</span> <span class="token string">"url"</span> <span class="token number">4</span> / Search <span class="token keyword">for</span> a Sharepoint site   <span class="token punctuation">\</span> <span class="token string">"search"</span> <span class="token number">5</span> / Type <span class="token keyword">in</span> driveID <span class="token punctuation">(</span>advanced<span class="token punctuation">)</span>   <span class="token punctuation">\</span> <span class="token string">"driveid"</span> <span class="token number">6</span> / Type <span class="token keyword">in</span> SiteID <span class="token punctuation">(</span>advanced<span class="token punctuation">)</span>   <span class="token punctuation">\</span> <span class="token string">"siteid"</span> <span class="token number">7</span> / Sharepoint server-relative path <span class="token punctuation">(</span>advanced, e.g./teams/hr<span class="token punctuation">)</span>   <span class="token punctuation">\</span> <span class="token string">"path"</span>Your choice<span class="token operator">></span> <span class="token number">1</span> <span class="token comment"># 输入 1 (个人版或商业版 Onedrive) 或根据自己的类型选择 </span>Found <span class="token number">1</span> drives, please <span class="token keyword">select</span> the one you want to use:<span class="token number">0</span>: OneDrive <span class="token punctuation">(</span>business<span class="token punctuation">)</span> <span class="token assign-left variable">id</span><span class="token operator">=</span>Chose drive to use:<span class="token operator">></span> <span class="token number">0</span> <span class="token comment"># 选择想要链接的磁盘 </span>Found drive <span class="token string">'root'</span> of <span class="token builtin class-name">type</span> <span class="token string">'business'</span>, URL: https://xzgfwacnz0-my.sharepoint.com/personal/washington_1ove_club/DocumentsIs that okay?y<span class="token punctuation">)</span> Yes <span class="token punctuation">(</span>default<span class="token punctuation">)</span>n<span class="token punctuation">)</span> Noy/n<span class="token operator">></span> y--------------------<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> onedriveregion <span class="token operator">=</span> globaltoken <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>drive_id <span class="token operator">=</span> drive_type <span class="token operator">=</span> business--------------------y<span class="token punctuation">)</span> Yes this is OK <span class="token punctuation">(</span>default<span class="token punctuation">)</span>e<span class="token punctuation">)</span> Edit this remoted<span class="token punctuation">)</span> Delete this remotey/e/d<span class="token operator">></span> y <span class="token comment"># 确认配置 </span>Current remotes:Name                 Type<span class="token operator">==</span><span class="token operator">==</span>                 <span class="token operator">==</span><span class="token operator">==</span>Onedrive             onedrive<span class="token builtin class-name">test</span>                 onedrivee<span class="token punctuation">)</span> Edit existing remoten<span class="token punctuation">)</span> New remoted<span class="token punctuation">)</span> Delete remoter<span class="token punctuation">)</span> Rename remotec<span class="token punctuation">)</span> Copy remotes<span class="token punctuation">)</span> Set configuration passwordq<span class="token punctuation">)</span> Quit confige/n/d/r/c/s/q<span class="token operator">></span> q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-以磁盘方式挂载"><a href="#3-以磁盘方式挂载" class="headerlink" title="3. 以磁盘方式挂载"></a>3. 以磁盘方式挂载</h3><ol><li>新建文件夹作为要挂载的本地目录。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/Onedrive     <span class="token comment"># 这里的目录路径自行决定 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>挂载远程硬盘</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rclone <span class="token function">mount</span> DriveName:Folder LocalFolder --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 <span class="token operator">&amp;&amp;</span><span class="token comment">#DriveName 为配置时填的 name </span><span class="token comment">#Folder 为 onedrive 里的文件夹 </span><span class="token comment">#LocalFolder 为刚刚创建的本地文件夹 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>挂载完成后可使用 <code>df -h</code> 命令查看磁盘情况</p><h3 id="4-卸载硬盘"><a href="#4-卸载硬盘" class="headerlink" title="4. 卸载硬盘"></a>4. 卸载硬盘</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fusermount -qzu LocalFolder      <span class="token comment"># 卸载硬盘 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-设置开机自启"><a href="#5-设置开机自启" class="headerlink" title="5. 设置开机自启"></a>5. 设置开机自启</h3><h4 id="1-添加到-systemd-中"><a href="#1-添加到-systemd-中" class="headerlink" title="1. 添加到 systemd 中"></a>1. 添加到 systemd 中</h4><p>先新建 <code>systemd</code> 配置文件，适用 <code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将后面修改成你上面手动运行命令中，除了 rclone 的全部参数 </span><span class="token assign-left variable">command</span><span class="token operator">=</span><span class="token string">"mount DriveName:Folder LocalFolder --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000"</span><span class="token comment"># 以下是一整条命令，一起复制到 SSH 客户端运行 </span><span class="token function">cat</span> <span class="token operator">></span> /etc/systemd/system/rclone.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=RcloneAfter=network-online.target[Service]Type=simpleExecStart=<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> -v rclone<span class="token variable">)</span></span> <span class="token variable">$&#123;command&#125;</span>Restart=on-abortUser=root[Install]WantedBy=default.targetEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-启动-rclone"><a href="#2-启动-rclone" class="headerlink" title="2. 启动 rclone"></a>2. 启动 rclone</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start rclone <span class="token comment"># 启动 rclone</span>systemctl <span class="token builtin class-name">enable</span> rclone <span class="token comment"># 设置 rclone 开机自启 </span>其他命令systemctl restart rclone <span class="token comment"># 重启 rclone</span>systemctl stop rclone <span class="token comment"># 停止 rclone</span>systemctl status rclone <span class="token comment"># 查看 rclone</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接</p><p><a href="https://ifibe.com/posts/b4099b8/">https://ifibe.com/posts/b4099b8/</a></p><p><a href="https://www.moerats.com/archives/481/">https://www.moerats.com/archives/481/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04 安装 qBittorrent</title>
      <link href="2021/04/18/ubuntu-18.04-an-zhuang-qbittorrent/"/>
      <url>2021/04/18/ubuntu-18.04-an-zhuang-qbittorrent/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装工具包"><a href="#1-安装工具包" class="headerlink" title="1. 安装工具包"></a>1. 安装工具包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> python-software-properties<span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以在 Ubuntu 18.04 服务器上安装 qBittorrent 命令行客户端，并通过 qBittorrent Web 界面对其进行管理（您可以在 Web 浏览器中对其进行控制）。 SSH 进入您的 Ubuntu 18.04 服务器，并使用相同的 PPA 安装 qBittorrent 守护程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">add-apt-repository ppa:qbittorrent-team/qbittorrent-stable<span class="token function">apt</span> <span class="token function">install</span> qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，我们需要安装 <code>qbittorrent-nox</code> （不含 X），而不是 <code>qbittorrent</code>。 </p><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h2><p>qBittorrent-nox 旨在通过其功能丰富的 Web UI 进行控制，您可以使用以下命令启动 qBitorrent-nox：</p><pre class="line-numbers language-none"><code class="language-none">qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，不建议以这种方式启动 qBittorrent-nox，因为您无法在运行其他命令时运行它。 按 <code>Ctrl+C</code> 立即退出。 我们可以创建一个 systemd 服务单元，以便它可以在后台运行，也可以在系统启动时启动。</p><p>创建 <code>qbittorrent-nox</code> 用户和组，以便它可以以非特权用户身份运行，这将提高服务器的安全性。</p><pre class="line-numbers language-none"><code class="language-none">adduser --system --group qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的 <code>--system</code> 标志表示我们正在创建系统用户而不是普通用户。 系统用户没有密码，也无法登录，这是 torrent 客户端所需的。 主目录 <code>/home/qbittorent-nox</code> 将为此用户创建。 您可能想将用户帐户添加到组中 <code>qbittorrent-nox</code> 使用以下命令，以便用户帐户可以访问 qBittorrent-nox 下载的文件。 文件下载到 <code>/home/qbittorrent-nox/Downloads/</code> 默认。 请注意，您需要重新登录才能使组更改生效。</p><pre class="line-numbers language-none"><code class="language-none">adduser your-username qbittorrent-noxadduser qbittorrent-nox qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后使用您喜欢的文本编辑器（例如 nano）为 qbittorrent-nox 创建一个 systemd 服务文件。</p><pre class="line-numbers language-none"><code class="language-none">sudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;qbittorrent-nox.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下行复制并粘贴到文件中。 如果还有另一个使用端口 8080 的服务，则需要将 qBitorrent 的端口号更改为诸如 8081 之类的其他名称。 <code>-d</code> 在此 systemd 服务单元中需要（守护程序）选项。</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;qBittorrent Command Line ClientAfter&#x3D;network.target[Service]#Do not change to &quot;simple&quot;Type&#x3D;forkingUser&#x3D;qbittorrent-noxGroup&#x3D;qbittorrent-noxUMask&#x3D;007ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;qbittorrent-nox -d --webui-port&#x3D;8080Restart&#x3D;on-failure[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要在 Nano 文本编辑器中保存文件，请按 <code>Ctrl+O</code>，然后按 <code>Enter</code> 确认。 按 <code>Ctrl+X</code> 退出。 现在，使用以下命令启动 qBittorrent-nox。</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，如果您更改了 systemd 服务文件，则需要重新加载 systemd 守护程序才能使更改生效。</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可能还希望在系统启动时启用自动启动。</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl enable qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查其状态：</p><pre class="line-numbers language-none"><code class="language-none">systemctl status qbittorrent-nox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171106.png"></p><p>您可以看到 qBittorrent-nox 正在运行，并且在启动时启用了自动启动。</p><h2 id="3-访问-qBittorrent-Web-UI"><a href="#3-访问-qBittorrent-Web-UI" class="headerlink" title="3. 访问 qBittorrent Web UI"></a>3. 访问 qBittorrent Web UI</h2><p>要从本地网络访问 qBittorrent Web UI，请输入 Ubuntu 服务器的专用 IP 地址，然后输入如下的端口号。</p><pre class="line-numbers language-none"><code class="language-none">YourIP:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用户名是 admin。 默认密码为 “ adminadmin”。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171117.png"></p><p>默认的 Web 界面。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171128.png"></p><p>可以去 <code>Tools</code> &gt; <code>Options</code> 并选择 “ Web UI” 选项卡，切换用户界面语言。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171138.png"></p><p>强烈建议更改默认的用户名和密码。 去 <code>Tools</code> &gt; <code>Options</code> 并选择 “ Web UI” 选项卡。 在 “身份验证” 部分下，更改用户名和密码。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171143.png"></p><p>现在，您可以开始在 Ubuntu 18.04 服务器上下载种子了。 您可以选择上传本地种子或添加磁力链接。 文件下载到 <code>/home/qbittorrent-nox/Downloads/</code> 默认。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04 安装 transmission</title>
      <link href="2021/04/15/ubuntu-18.04-an-zhuang-transmission/"/>
      <url>2021/04/15/ubuntu-18.04-an-zhuang-transmission/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>Transmission 全称 TransmissionBittorrent，由 C 开发而成（Mac OS 上用的是 Objective-C），硬件资源消耗极少，界面极度精简。Transmission 作为专业的 BitTorrent 客户端，被 PT 站所接受。Transmission 被众多 linux 发行版，包括 <a href="https://baike.baidu.com/item/Ubuntu">Ubuntu</a>、<a href="https://baike.baidu.com/item/Mandriva">Mandriva</a>、<a href="https://baike.baidu.com/item/Mint">Mint</a>、<a href="https://baike.baidu.com/item/Fedora">Fedora</a>、<a href="https://baike.baidu.com/item/Puppy">Puppy</a>、<a href="https://baike.baidu.com/item/openSUSE">openSUSE</a> 选作默认 BT 下载工具。这篇文章博主将介绍如何在 VPS 中安装 Transmission。</p><h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2. 特性"></a>2. 特性</h3><ul><li>开源跨平台，由社区志愿者开发</li><li>绝无各种广告及浏览器工具栏插件等</li><li>完全免费，绝无收费高级版与免费基础版等区别</li><li>数据加密、损坏修复</li><li>来源交换 （支持 Bittorrent、Ares、迅雷、Vuze 和 μTorrent 等等）</li><li>硬件资源消耗极低，甚至比某些命令行 BT 工具都要低</li><li>可以选择种子中要下载的文件</li><li>支持 encryption、web 界面、远程控制、磁力链接、DHT、uTP、uPnP、NAT-PMP</li><li>支持目录监控、全局或单一速度限制</li><li>制作种子、快速继续</li><li>黑名单，可以按时升级（资料来自 PeerGuardian 和 PeerBlock）</li><li>单一监听端口、带宽计划、整理（过滤）</li><li>HTTPS tracker 支持以及 tracker 编辑功能支持</li><li>支持 IPv6</li><li>对应不同平台有着特定的图形用户界面</li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>本文以 **Ubuntu 18.04 系统 ** 为例，Transmission 有多种客户端，本次选用的是：</p><blockquote><p><strong>transmission-daemon</strong>: 一个 Transmission 的后台守护程序，本身不具备操作指令，只能通过 Web 客户端或者 transmission-remote-cli 来进行控制。这个程序特别适合安装在服务器上或者嵌入式系统中，以及一些没有显示器的设备上。</p></blockquote><h3 id="1-安装-transmission-daemon"><a href="#1-安装-transmission-daemon" class="headerlink" title="1. 安装 transmission-daemon"></a>1. 安装 transmission-daemon</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> transmission-daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 transmission-daemon 的同时也会自动安装 transmission-cli，即 Transmission 命令行客户端</p><h3 id="2-修改-transmission-daemon-配置文件"><a href="#2-修改-transmission-daemon-配置文件" class="headerlink" title="2. 修改 transmission-daemon 配置文件"></a>2. 修改 transmission-daemon 配置文件</h3><p>这里首先了解一下 transmission-daemon 的使用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 </span><span class="token function">sudo</span> <span class="token function">service</span> transmission-daemon start<span class="token comment"># 停止 </span><span class="token function">sudo</span> <span class="token function">service</span> transmission-daemon stop<span class="token comment"># 重启 </span><span class="token function">sudo</span> <span class="token function">service</span> transmission-daemon restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先执行一次启动和停止命令，生成配置文件，接着编辑 transmission-daemon 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /var/lib/transmission-daemon/info/settings.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改相关参数 </span><span class="token string">"download-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/sdb/bt/Downloads"</span>, 下载完成的保存路径<span class="token string">"incomplete-dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/sdb/bt/tmp"</span>, 未下载完成的保存路径<span class="token string">"incomplete-dir-enabled"</span><span class="token builtin class-name">:</span> true, 启用未下载完成的保存路径<span class="token string">"rpc-authentication-required"</span><span class="token builtin class-name">:</span> true, 远程控制验证，默认关闭<span class="token string">"rpc-password"</span><span class="token builtin class-name">:</span> <span class="token string">"yourpassword"</span>, 默认密码这里是加密的，启动后会自动加密<span class="token string">"rpc-port"</span><span class="token builtin class-name">:</span> <span class="token number">9091</span>, 网页 GUI 的端口号，可自行修改<span class="token string">"rpc-username"</span><span class="token builtin class-name">:</span> <span class="token string">"yourusername"</span>, 远程电脑登录网页 GUI 的用户名称<span class="token string">"rpc-whitelist"</span><span class="token builtin class-name">:</span> <span class="token string">"127.0.0.1"</span>, 允许远程连接的 IP 地址白名单，支持通配符，多个 IP 以逗号分隔<span class="token string">"rpc-whitelist-enabled"</span><span class="token builtin class-name">:</span> false, 启用 IP 认证模式，如果启用，那么只能在白名单的地址才能连接 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完毕后使用 Ctrl+X，选择 y 保存并退出<br>此时再执行启动命令，访问：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://ip 地址：9091<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入刚才设置的帐号密码，即可访问 Transmission 的 Web 页面。</p><h2 id="三、界面美化"><a href="#三、界面美化" class="headerlink" title="三、界面美化"></a>三、界面美化</h2><p>而 <code>transmission-web-control</code> 项目则为 Transmission 进行了 Web 界面的汉化，完善了功能，以及增加了 Tracker 服务器分组及状态，更方便 PT 下载。</p><p>项目地址：<a href="https://www.jiyiblog.com/go/aHR0cHM6Ly9naXRodWIuY29tL3JvbmdnYW5nL3RyYW5zbWlzc2lvbi13ZWItY29udHJvbA==">https://github.com/ronggang/transmission-web-control</a></p><h3 id="1-界面预览"><a href="#1-界面预览" class="headerlink" title="1. 界面预览"></a>1. 界面预览</h3><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171035.png"></p><h3 id="2-安装方法"><a href="#2-安装方法" class="headerlink" title="2. 安装方法"></a>2. 安装方法</h3><h4 id="1-获取安装脚本"><a href="#1-获取安装脚本" class="headerlink" title="1. 获取安装脚本"></a>1. 获取安装脚本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-执行安装脚本"><a href="#2-执行安装脚本" class="headerlink" title="2. 执行安装脚本"></a>2. 执行安装脚本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> install-tr-control-cn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后出现如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515171041.png"></p><p>此时选择 1 即可安装</p><p>安装完毕后，Ctrl+F5 刷新即可看到全新的 Web 界面。</p><h2 id="四、做种方法"><a href="#四、做种方法" class="headerlink" title="四、做种方法"></a>四、做种方法</h2><pre class="line-numbers language-none"><code class="language-none">Options:-p 表示这是私用的种子，PT 的话这个必须要加上；-o 生成的种子输出位置，不要忘记把名字打上；-t tracker 的地址，我用的老师站的 tracker 的做范本，如果大家需要做其他 PT 站的种子，请自行修改-s 每个文件块的大小，单位是 KB，我设置的是 2M，也就是 2048KB-c 表示备注，可以添加你自己的标注，这里建议添加自己喜欢的备注名称 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-使用-find-命令找到环境内的-transmission-安装位置。"><a href="#1-使用-find-命令找到环境内的-transmission-安装位置。" class="headerlink" title="1. 使用 find 命令找到环境内的 transmission 安装位置。"></a>1. 使用 find 命令找到环境内的 transmission 安装位置。</h3><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name transmission-create<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-使用-cd-命令进入-transmission-的-bin-目录"><a href="#2-使用-cd-命令进入-transmission-的-bin-目录" class="headerlink" title="2. 使用 cd 命令进入 transmission 的 bin 目录"></a>2. 使用 cd 命令进入 transmission 的 bin 目录</h3><pre class="line-numbers language-none"><code class="language-none">cd &#x2F; 你的地址 &#x2F;transmission&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-使用-ls-命令检测-bin-目录内容"><a href="#3-使用-ls-命令检测-bin-目录内容" class="headerlink" title="3. 使用 ls 命令检测 bin 目录内容"></a>3. 使用 ls 命令检测 bin 目录内容</h3><pre class="line-numbers language-none"><code class="language-none">ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果正常反馈，你会看到信息至少有一条显示：</p><pre class="line-numbers language-none"><code class="language-none">transmission-create<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>（如果没有显示，请升级至 transmission 最新版本 2.9.4）</em></p><h3 id="4-使用-transmission-create-命令行制作你的种子"><a href="#4-使用-transmission-create-命令行制作你的种子" class="headerlink" title="4. 使用 transmission-create 命令行制作你的种子"></a>4. 使用 transmission-create 命令行制作你的种子</h3><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;transmission-create -p -o &#x2F; 你要输出的种子文件位置 &#x2F; 你要输出的种子名称.torrent -t 你需要的 Tracker 服务器的 URL 是 -s 2048 &#x2F; 你需要做种原文件的位置 -c 你的备注 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数</p><pre class="line-numbers language-none"><code class="language-none">-p 表示这是私用的种子，PT 的话这个必须要加上；-o 生成的种子输出位置，不要忘记把名字打上；-t tracker 的地址，我用的老师站的 tracker 的做范本，如果大家需要做其他 PT 站的种子，请自行修改 - s 每个文件块的大小，单位是 KB，我设置的是 2M，也就是 2048KB-c 表示备注，可以添加你自己的标注，这里建议添加自己喜欢的备注名称 < span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后空一格写源文件的位置，也就是文件的存放位置，可以是一个文件或者一整个目录<br>最后可以空一行加一个 &amp;，这样即使关掉窗口也可以在后台运行<br>填完，回车，种子就在制作了。种子制作完成后，会显示一个</p><pre class="line-numbers language-none"><code class="language-none">done！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你就可以打开你的资源管理器看到这个种子文件了。</p><p>接下来就是上传这个种子到你的 PT 网站，上传之后，再下载一份种子，用这个下载下来的 torrent 文件，在 transmission 的 Web 管理界面里添加种子，记得要指定下载目录，开始验证文件，完成后，就可以做种了。</p><p>Note： 之前制作的种子文件，同你上传后所下载的种子文件，其实是不同的，后者带有你自己帐号的 passkey，用来追踪你的下载和上传的量。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建 (三)：Typora + PicGo + Gitee 图床</title>
      <link href="2021/03/19/bo-ke-da-jian-san-typora-picgo-github-gitee-tu-chuang/"/>
      <url>2021/03/19/bo-ke-da-jian-san-typora-picgo-github-gitee-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-PicGo"><a href="#1-PicGo" class="headerlink" title="1.PicGo"></a>1.PicGo</h2><p>PicGo 是一位中国开发者基于 electron-vue 开发的用于快速上传图片并获取图片 URL 链接的开源工具，GitHub 主页：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>，作者博客：<a href="https://molunerfinn.com/">MARKSZ の Blog</a>。</p><p>PicGo 只要配置好图床类型，就可以直接拖拽图片进行上传并自动返回图片链接，配合 Typora 还可以实现在文章中插入图片时自动上传并替换为链接内容，完全不用感知上传图片的过程。</p><p>PicGo 本体支持七牛云、腾讯云、又拍云、阿里云、SM、Imgur、GitHub 这些图床，而且还支持自己扩展第三方图床的支持插件，比如就有人开发了 Gitee 的插件。更多介绍见 [官方文档](<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#">https://picgo.github.io/PicGo-Doc/zh/guide/#</a> 听说你也想用 picgo)，下载地址：<a href="https://molunerfinn.com/PicGo/">PicGo</a></p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170812.png"></p><h3 id="PicGo-配置"><a href="#PicGo-配置" class="headerlink" title="PicGo 配置"></a>PicGo 配置</h3><p>打开 PicGo , 选择 <code>图床设置</code>，选择 <code>GitHub 图床</code>，填写参数：</p><ul><li><code>设定仓库名</code>，填写格式为 <code>用户名 / 仓库名</code></li><li><code>设定分支名</code>，填写默认分支 <code>master</code> 或者 <code>main</code></li><li><code>设定 Token</code>，填写上一步获取的 token 值</li><li><code>指定存储路径</code>，选填，可以自定义名称，比如用年月来分类，不填图片会上传在仓库根目录。</li><li><code>设定自定义域名</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面配置 CDN 加速需要更改此项。</li></ul><p>选择设为默认图床，点击确定保存配置。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170817.png"></p><p>配置完成后，点击 <code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在 <code>PicGo 设置</code>，打开 <code>上传后自动复制 URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170824.png"></p><h2 id="2-Typora"><a href="#2-Typora" class="headerlink" title="2.Typora"></a>2.Typora</h2><p>网上有很多介绍的 Typora 的文章，推荐两篇写的很详细的文章。</p><p>深度介绍 (必看)：<a href="https://sspai.com/post/54912">少数派：Typora 完全使用详解</a></p><p>快捷键介绍：<a href="https://www.cnblogs.com/hider/p/11614688.html">Typora 入门</a></p><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><p>下面介绍几个我觉得很有用很方便的设置。</p><p>打开 <code>文件</code> –&gt; <code>偏好设置</code>。</p><h4 id="1-打开自动保存"><a href="#1-打开自动保存" class="headerlink" title="1. 打开自动保存"></a>1. 打开自动保存</h4><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170830.png"></p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170846.png"></p><h4 id="2-打开成对符号"><a href="#2-打开成对符号" class="headerlink" title="2. 打开成对符号"></a>2. 打开成对符号</h4><p>选择 <code>编辑器</code>，勾选 <code>匹配括号和引号</code> 和 <code>匹配 Markdown 字符</code>。这样当我们输入括号 (<code>[]()&#123;&#125;</code>) 等成对的符号时，只需要输入左边一半，软件会自动补充右边一半。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170853.png"></p><h4 id="3-打开首行缩进（可选）"><a href="#3-打开首行缩进（可选）" class="headerlink" title="3. 打开首行缩进（可选）"></a>3. 打开首行缩进（可选）</h4><p>选择 <code>Markdown</code>，勾选 <code>首行缩进</code>。这个看自己需要，只是在 Typora 本地显示中首行缩进，因为 Markdown 语法本身并没有支持首行缩进的符号，所以文件拿到别的地方不会有首行缩进的效果。如果非要首行缩进，可以在段落开头加个 <code>  </code> 可以在其他地方打开时也能首行缩进。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170858.png"></p><h4 id="4-打开自动保存图片"><a href="#4-打开自动保存图片" class="headerlink" title="4. 打开自动保存图片"></a>4. 打开自动保存图片</h4><p>选择 <code>图像</code>，选择 <code>插入图片时...</code> 自动执行的动作：</p><ul><li>默认是 <code>无特殊操作</code>，当你写文章时，粘贴或者拖动进来的图片会自动保存在 <code>C:\Users\&lt; 电脑用户名 &gt;\AppData\Roaming\Typora\typora-user-images</code> 目录下。</li><li><code>复制图片到当前文件夹</code>，选择该选项时，粘贴或者拖动进来的图片会自动保存在当前编辑的文件同目录下。</li><li><code>复制图片到 ./$&#123;filename&#125;.assets 文件夹</code>，选择该选项时，粘贴或者拖动图片进来，会自动在当前编辑的文件目录下新建文件夹 <code>$&#123;filename&#125;.assets</code> 并将图片复制到该文件夹下，其中 ``${filename}<code>是当前编辑的文件名，不包含</code>.md`。</li><li><code>上传图片</code>，选择该选项时，粘贴或者拖动图片进来，会根据下面的 <code>上传服务设置</code> 将图片自动上传到图床，平时最好用这个设置，详细内容在下一篇文章中介绍。</li><li><code>复制到指定路经</code>，选择该选项时，可以自己填入一个文件夹，粘贴或者拖动图片进来，会自动创建文件夹并将图片复制进去。</li></ul><p>建议选择 <code>上传图片</code>，按照下篇文章的方法将图片保存在图床。当然，如果写的的文章只保存在本地或者需要断网时浏览，那么可以选择其他几个选项。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170904.png"></p><h2 id="3-Gitee-图床"><a href="#3-Gitee-图床" class="headerlink" title="3.Gitee 图床"></a>3.Gitee 图床</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h3><p>第一步要先在 Gitee 新建一个仓库用于存储图片。</p><p>依次填写 <code>仓库名称</code>，<code>路径</code>，<code>仓库介绍</code>，注意要勾选 <code>公开</code> 和 <code>使用 Readme 文件初始化这个仓库</code>，最后点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170910.png"></p><h3 id="2-获取私人令牌"><a href="#2-获取私人令牌" class="headerlink" title="2. 获取私人令牌"></a>2. 获取私人令牌</h3><p>** 私人令牌 ** 主要用于让 PicGo 有权限往我们的仓库 push 代码 (图片)。</p><p>点击自己的头像，选择 ** 设置 **。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170916.png"></p><p>点击 ** 私人令牌 **，选择生成新令牌。</p><p>![](Image/2021-03-19 - 博客搭建（三）：Typora-PicGo-GitHub-Gitee 图床.assets/image-20210319155200623.png)</p><p>同样的，我们只勾选更新代码的权限。填写 <code>私人令牌描述</code>，点击提交。因为是敏感操作，此时需要确认密码。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170922.png"></p><p>复制字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170931.png"></p><h3 id="3-PicGo-配置"><a href="#3-PicGo-配置" class="headerlink" title="3. PicGo 配置"></a>3. PicGo 配置</h3><p>PicGo 本体没有支持 Gitee ，所以需要下载一个插件，有人己经写好了。</p><p>打开 PicGo ，点击 <code>插件设置</code>，搜索框输入 <code>gitee</code>，目前有两个插件应该都能用，任选一个安装，这里我选择的后面那个。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170937.png"></p><p>安装好插件后，这时再选择 <code>图床设置</code>，选择 <code>gitee</code>，填写参数：</p><ul><li><code>repo</code>，填写格式为 <code>用户名 / 仓库名</code></li><li><code>branch</code>，填写默认分支 <code>master</code></li><li><code>token</code>，填写上一步获取的私人令牌的值</li><li><code>path</code>，选填，可以自定义名称，不填图片会上传在仓库根目录。</li><li><code>customPath</code>，这个会在上一个参数的基础上再创建一层子文件夹用于按年、年月或年季来分类保存。</li><li><code>customUrl</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面解决 <code>文件大于 1M，登录后可见</code> 的问题需要更改此项。</li></ul><p>选择设为默认图床，点击确定保存配置。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170943.png"></p><h3 id="4-Typora-配置"><a href="#4-Typora-配置" class="headerlink" title="4. Typora 配置"></a>4. Typora 配置</h3><p>打开 <code>文件</code>，<code>偏好设置</code>，<code>图像</code>，选择插入图片时 <code>上传图片</code>，勾选图中三个选项，上传服务设定选择 <code>PicGo (app)</code>，PicGo 路径通过后面的文件夹选择自己电脑上 PicGo 的安装路径。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170948.png"></p><p>此时，使用 Typora 编辑文件，拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到我们的 GitHub 图床，并把返回的图片链接粘贴到文章中，快去试试吧。</p><h3 id="5-解决”-文件大于-1M，登录后可见”-问题"><a href="#5-解决”-文件大于-1M，登录后可见”-问题" class="headerlink" title="5. 解决” 文件大于 1M，登录后可见” 问题"></a>5. 解决” 文件大于 1M，登录后可见” 问题</h3><p>从上一步可以看到 Gitee 存储的图片地址是 <code>https://gitee.com/yushuaigee/myblog/raw</code> 开头的网址，这个域名是国内站点，速度很快，无需配置 CDN 加速，图床配置好之后，图片上传成功，在浏览器也能打开，看似没毛病，其实暗藏玄机。</p><p>如果你上传的图片大于 1M ，不管是在下一步的 Typora 中还是在浏览器网页中，是无法加载出图片的，比如这张图片 <code>https://gitee.com/yushuaigee/myblog/raw/master/img/myblog.gif</code>，输入到浏览器会显示 <code>文件大于 1M，登录后可见</code>。如果能打开是因为你前面已经登录了 Gitee 了，浏览器新建一个无痕窗口就打不开了。</p><p>可是别人在浏览我们博客时不可能要先登录个 Gitee 吧，所以要想办法解决一下。前面我们将博客仓库打开 Gitee Pages 功能，其他人可以访问我们博客仓库里的博客了，图床仓库也一样，打开它的 Gitee Pages 功能，无需登陆就可以访问里面的图片了。</p><p>进入图床仓库主页，点击 <code>服务</code>，<code>Gitee Pages</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/QingLiang2021/blog.img001/img/2021/20210515170954.png"></p><p>点击 <code>启动</code> 部署。</p><p>这样我们就可以通过 Gitee Pages 地址来访问图床仓库里的图片了</p><p>** 这种方法也存在一个问题 **，就是因为 Gitee Pages 不支持自动更新 (pro 版支持，需要收费)，每次上传完图片后，需要打开浏览器手动点一下更新。你可以写完文章，把图片一把上传，再点一次更新。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建（二）：基于 Gitee pages 建站</title>
      <link href="2021/03/18/bo-ke-da-jian-er-ji-yu-gitee-pages-jian-zhan/"/>
      <url>2021/03/18/bo-ke-da-jian-er-ji-yu-gitee-pages-jian-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-Gitee-Pages-简介"><a href="#一、-Gitee-Pages-简介" class="headerlink" title="一、 Gitee Pages 简介"></a>一、 Gitee Pages 简介</h2><p><a href="https://gitee.com/help/articles/4136">Gitee pages 官网</a> 的介绍：Gitee Pages 是一个免费的静态网页托管服务，您可以使用 Gitee Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用 Gitee 的 Pages 服务。目前 Gitee Pages 支持 Jekyll、Hugo、Hexo 编译静态资源。</p><h2 id="二、Gitee-Pages-准备"><a href="#二、Gitee-Pages-准备" class="headerlink" title="二、Gitee Pages 准备"></a>二、Gitee Pages 准备</h2><h3 id="1-注册-Gitee-账号"><a href="#1-注册-Gitee-账号" class="headerlink" title="1. 注册 Gitee 账号"></a>1. 注册 Gitee 账号</h3><h3 id="2-创建-Gitee-Pages-仓库"><a href="#2-创建-Gitee-Pages-仓库" class="headerlink" title="2. 创建 Gitee Pages 仓库"></a>2. 创建 Gitee Pages 仓库</h3><p>登录账号后，点击页面右上角的 +，选择新建仓库。</p><p>仓库名称这里建议填写 <code>你的用户名</code>，这样生成出来的网页地址是比较纯净的形式，如 <code>https://&lt; 你的用户名 &gt;.github.io</code>。当然也可以自定义名称，比如 <code>blog</code>，但是这样后面生成出来的网页地址会带一个子目录，像 <code>https://&lt; 你的用户名 &gt;.github.io/blog</code> 这样。</p><p>注意勾选 <code>使用 Readme 文件初始化这个仓库</code>，会自动创建 <code>master</code> 分支并生成一个 <code>readme.md</code> 文件。</p><p>最后点击下面的创建。</p><p>点击页面右上角的服务，选择 Gitee Pages。</p><p>勾选 <code>强制使用 HTTPS</code>，点击启动。</p><h3 id="3-测试-Gitee-Pages-页面"><a href="#3-测试-Gitee-Pages-页面" class="headerlink" title="3. 测试 Gitee Pages 页面"></a>3. 测试 Gitee Pages 页面</h3><p>创建 Gitee Pages 仓库后，为了测试能否访问 Pages 服务，我们给它添加一个静态网页。</p><p>先点击左边的代码回到文件页面，然后点击文件 – 新建文件在仓库下新建文件。</p><p>输入文件名 <code>index.html</code>，在下面输入内容 <code>&lt;h1 &gt; 这是我的博客！&lt;/h1&gt;</code>，这是 html 标记语言，表示一级标题。</p><p>其他保持默认，点击最下面的提交，提交文件到仓库。</p><p>** 与 GitHub 提交自动部署不同的是，Gitee 上提交后需要手动部署。**(网上有许多实现了 Gitee Pages 自动部署的脚本，其实就是用脚本模拟下面的操作，可以参考)</p><p>点击页面右上角的服务，选择 Gitee Pages 回到部署界面。</p><p>点击下面的更新，下图中红框圈出的就是你的博客地址了，格式为 <code>https://&lt; 你的用户名 &gt;.github.io</code>。</p><p>点击博客地址或者在浏览器输入博客地址。此时就可以看见我们刚创建的网页，其中的内容就是刚才写的内容。说明 Gitee Pages 服务已经正常。</p><h2 id="三、Gitee-Pages-发布"><a href="#三、Gitee-Pages-发布" class="headerlink" title="三、Gitee Pages 发布"></a>三、Gitee Pages 发布</h2><p>上一步 “测试 Gitee Pages 页面” 中，我们在 Gitee Pages 仓库目录下新建了一个 <code>index.html</code>，就可以在自己的专属网址看到这个网页了。同理我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。当然，对于 Hexo 来说，部署提交只需要几条命令。</p><h3 id="1-配置-Git-参数"><a href="#1-配置-Git-参数" class="headerlink" title="1. 配置 Git 参数"></a>1. 配置 Git 参数</h3><p>在博客根目录下，右键，打开 Git Bash Here。</p><p>配置用户名和邮箱，这两个参数用于 Git 提交时的身份识别。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中 username 和 username@XXX.com 是你注册 GitHub 的用户名和邮箱 </span><span class="token function">git</span> config --global user.name <span class="token string">"username"</span><span class="token function">git</span> config --global user.email <span class="token string">"username@XXX.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成 SSH keys，主要用于 Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 GitHub 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p><p>输入下面命令，然后一直按回车，直到结束</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中 username@XXX.com 是你注册 GitHub 的邮箱 </span>ssh-keygen -t rsa -C <span class="token string">"username@XXX.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入下面的命令，查看公钥内容，应该是一个 <code>ssh-rsa</code> 开头，以你的邮箱结尾的长字符串。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat 后面的路径就是上图中的公钥文件路径，直接复制过来就可以 </span><span class="token function">cat</span> /c/Users/XXX/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制公钥内容（其实在 Git Bash 命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，默认鼠标中键是粘贴）。</p><p>打开自己的 Github 主页，点击右上角的头像，点击 Settings。</p><p>** 添加个人公钥 **</p><p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现 <code>你的用户名</code> 和 <code>successfully</code> 字样，说明配置成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下面的命令什么都不用改 </span><span class="token function">ssh</span> -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-安装-Hexo-发布插件"><a href="#2-安装-Hexo-发布插件" class="headerlink" title="2. 安装 Hexo 发布插件"></a>2. 安装 Hexo 发布插件</h3><p>在博客根目录下，右键，打开 Git Bash Here。</p><p>输入下面的命令，安装 <code>hexo-deployer-git</code>。（安装失败或者卡住，参考第一篇文章修改 npm 源。）</p><p>这个插件用于把生成好的静态页面上传到 Gitee Pages 仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-发布！"><a href="#3-发布！" class="headerlink" title="3. 发布！! !"></a>3. 发布！! !</h3><p>从第一篇到现在这么多步骤过去了，可以说前面的所有操作都是在为最后的这一步 <code>发布</code> 做准备，现在终于到了见证奇迹的时刻了。</p><p>先别着急激动，让我们完成最最后一步配置，我们需要告诉 hexo 发布到哪里去，也就是把文件上传到哪个仓库。</p><p>打开博客 <code>根目录配置文件</code>(<code>D:\MyBlog\_config.yaml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 url 改为自己的网址 </span><span class="token comment"># 其中 xxxxxx 是前面多次用到的你的 Gitee 用户名，注意是 master 分支 </span>deploy:  type: <span class="token function">git</span>  repo: git@gitee.com:xxxxxx/xxxxxx.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建（一）：本地搭建 Hexo 框架</title>
      <link href="2021/03/17/bo-ke-da-jian-yi-ben-di-da-jian-hexo-kuang-jia/"/>
      <url>2021/03/17/bo-ke-da-jian-yi-ben-di-da-jian-hexo-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hexo-框架简介"><a href="#一、Hexo-框架简介" class="headerlink" title="一、Hexo 框架简介"></a>一、Hexo 框架简介</h2><p>Hexo 是一个专门用于博客类网站的开源项目，使用 Node.js 语言开发。Hexo 搭建过程简单快捷，配置灵活，可定制性非常高，许多开发者为他开发了丰富的主题库。</p><p>Hexo 中文网站：<a href="https://hexo.io/zh-cn/">hexo.io</a>，GitHub 地址：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a> 。</p><h2 id="二、Hexo-依赖环境安装：Node-js-、Git"><a href="#二、Hexo-依赖环境安装：Node-js-、Git" class="headerlink" title="二、Hexo 依赖环境安装：Node.js 、Git"></a>二、Hexo 依赖环境安装：Node.js 、Git</h2><h3 id="1-、Node-js"><a href="#1-、Node-js" class="headerlink" title="1 、Node.js"></a>1 、Node.js</h3><p>Hexo 使用 Node.js 开发，所以安装 Hexo 之前需要先安装 Node.js 环境。Node.js 是运行在服务端的 JavaScript ，安装了 Node.js 环境，就可以不用依赖浏览器就可以运行 js 代码，它也是基于 Chrome 引擎开发的一个开源项目。</p><h4 id="1-、官网下载-Node-js"><a href="#1-、官网下载-Node-js" class="headerlink" title="1)、官网下载 Node.js"></a>1)、官网下载 Node.js</h4><p>Node.js 中文官网： <a href="https://nodejs.org/zh-cn/">nodejs.org</a></p><h4 id="2-、安装-Node-js"><a href="#2-、安装-Node-js" class="headerlink" title="2)、安装 Node.js"></a>2)、安装 Node.js</h4><p>下载完安装包后双击打开，一路点 Next 就行了。</p><h4 id="3-、测试-Node-js-是否安装成功"><a href="#3-、测试-Node-js-是否安装成功" class="headerlink" title="3)、测试 Node.js 是否安装成功"></a>3)、测试 Node.js 是否安装成功</h4><p>终端输入：<code>npm -v</code>，出现版本号说明安装成功。<a href="https://www.runoob.com/nodejs/nodejs-npm.html">NPM 命令使用介绍</a></p><h3 id="2、Git"><a href="#2、Git" class="headerlink" title="2、Git"></a>2、Git</h3><p>Git（读音 /gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。简单理解就是下载代码的工具，因为 Hexo 是一个托管于 GitHub 上的开源项目，所以安装 Hexo 的时候需要使用 Git 来下载源码和依赖代码，而且后面要将自己的博客发布到 GitHub pages 或者 Gitee pages 上面也需要使用 Git。</p><h4 id="1-、官网下载-Git"><a href="#1-、官网下载-Git" class="headerlink" title="1)、官网下载 Git"></a>1)、官网下载 Git</h4><p>Git 官网：<a href="https://git-scm.com/">git-scm.com</a></p><h4 id="2-、安装-Git"><a href="#2-、安装-Git" class="headerlink" title="2)、安装 Git"></a>2)、安装 Git</h4><p>下载完安装包后双击打开，没有特殊需要的话，一路点 Next 就行了。</p><h4 id="3-、测试-Git-是否安装成功"><a href="#3-、测试-Git-是否安装成功" class="headerlink" title="3)、测试 Git 是否安装成功"></a>3)、测试 Git 是否安装成功</h4><p>Git 安装完成后，通过新增的右键菜单 Git Bash Here 就可以打开。在桌面空白处右键，选择 Git Bash Here，输入 <code>git --version</code> 回车，如果出现版本号说明安装成功。</p><h2 id="三、安装-Hexo"><a href="#三、安装-Hexo" class="headerlink" title="三、安装 Hexo"></a>三、安装 Hexo</h2><h3 id="1、本地安装-Hexo"><a href="#1、本地安装-Hexo" class="headerlink" title="1、本地安装 Hexo"></a>1、本地安装 Hexo</h3><p>首先在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在 D 盘根目录，取名 MyBlog。</p><p>进入新建的文件夹，右键，选择 <code>Git Bash Here</code> ，依次输入下面的命令。</p><pre class="line-numbers language-none"><code class="language-none"># 安装 hexo 框架npm install -g hexo-cli# 初始化文件夹hexo init# 安装 hexo 依赖包npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一行安装 hexo 模块，-g 表示安装全局模块；第二行是 hexo 初始化，会用 git clone 命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p><h3 id="2、可能遇到的问题"><a href="#2、可能遇到的问题" class="headerlink" title="2、可能遇到的问题"></a>2、可能遇到的问题</h3><ul><li><p>**<code>npm install -g hexo-cli</code> 命令执行卡住，或者报错连接不上 **。</p><p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令。npm 源的概念就和 Python 中的 pip 源一样，默认源是 <code>https://registry.npmjs.org/</code>。</p></li></ul><h3 id="3、本地博客效果"><a href="#3、本地博客效果" class="headerlink" title="3、本地博客效果"></a>3、本地博客效果</h3><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，下面看看效果。还是在 <code>Git Bash</code> 命令行窗口里，依次执行下面的命令。</p><pre class="line-numbers language-none"><code class="language-none"># 生成静态网站hexo g# 启动服务器hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接执行 <code>hexo g &amp;&amp; hexo s</code>，其中 <code>hexo g</code> 是 <code>hexo generate</code> 命令的简写，<code>hexo s</code> 是 <code>hexo server</code> 命令的简写。此时，打开浏览器，输入网址 <code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。</p><h2 id="四、发布文章"><a href="#四、发布文章" class="headerlink" title="四、发布文章"></a>四、发布文章</h2><h3 id="1、新建文章"><a href="#1、新建文章" class="headerlink" title="1、新建文章"></a>1、新建文章</h3><p>在博客根目录下右键，选择 <code>Git Bash Here</code>，输入下面命令</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot; 我的第一篇博客 & quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时进入博客根目录下的 <code>source\_posts</code>(D:\MyBlog\source_posts) 文件夹，可以看到多了一个 <code>我的第一篇博客.md</code> 文件，这便是新生成的博客文章。</p><h3 id="2、发布文章"><a href="#2、发布文章" class="headerlink" title="2、发布文章"></a>2、发布文章</h3><p>先 Ctrl + C 停止服务器，执行 <code>hexo g &amp;&amp; hexo s</code> 重新部署，刷新 <code>http://localhost:4000/</code>，可以看到博客上多了一篇文章。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 笔记</title>
      <link href="2021/03/17/markdown-bi-ji/"/>
      <url>2021/03/17/markdown-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰・格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 .md, .markdown。</p><h2 id="Markdown-应用"><a href="#Markdown-应用" class="headerlink" title="Markdown 应用"></a>Markdown 应用</h2><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge 等。</p><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>本教程将使用 Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。</p><p>支持导出 HTML、PDF、Word、图片等多种类型文件。</p><p>Typora 官网：<a href="https://typora.io/">https://typora.io/</a></p><h2 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h2><p>Markdown 标题有两种格式</p><h3 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用 = 和 - 标记一级和二级标题"></a>1、使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"> 我展示的是一级标题<span class="token punctuation">=================</span></span><span class="token title important"> 我展示的是二级标题<span class="token punctuation">-----------------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用-号标记"><a href="#2、使用-号标记" class="headerlink" title="2、使用 # 号标记"></a>2、使用 # 号标记</h3><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题 </span><span class="token title important"><span class="token punctuation">##</span> 二级标题 </span><span class="token title important"><span class="token punctuation">###</span> 三级标题 </span><span class="token title important"><span class="token punctuation">####</span> 四级标题 </span><span class="token title important"><span class="token punctuation">#####</span> 五级标题 </span><span class="token title important"><span class="token punctuation">######</span> 六级标题 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，** 段落的换行是使用两个以上空格加上回车 ** 。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content"> 斜体文本 </span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content"> 斜体文本 </span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"> 粗体文本 </span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"> 粗体文本 </span><span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content"> 粗斜体文本 </span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content"> 粗斜体文本 </span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="line-numbers language-none"><code class="language-none">**** * ******- - -----------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><pre class="line-numbers language-none"><code class="language-none">GOOGLE.COM~~BAIDU.COM~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的标签来实现：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span > 带下划线文本 < span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><pre class="line-numbers language-none"><code class="language-none">[^ 要注明的文本]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号 (<strong><em><strong>)、加号 (</strong>+</em>*) 或是减号 (</strong>-**) 作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项<span class="token list punctuation">*</span> 第二项<span class="token list punctuation">*</span> 第三项<span class="token list punctuation">+</span> 第一项<span class="token list punctuation">+</span> 第二项<span class="token list punctuation">+</span> 第三项<span class="token list punctuation">-</span> 第一项<span class="token list punctuation">-</span> 第二项<span class="token list punctuation">-</span> 第三项 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项<span class="token list punctuation">2.</span> 第二项<span class="token list punctuation">3.</span> 第三项 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项：    <span class="token list punctuation">-</span> 第一项嵌套的第一个元素    <span class="token list punctuation">-</span> 第一项嵌套的第二个元素<span class="token list punctuation">2.</span> 第二项：    <span class="token list punctuation">-</span> 第二项嵌套的第一个元素    <span class="token list punctuation">-</span> 第二项嵌套的第二个元素 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个 ** 空格 ** 符号：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块引用<span class="token blockquote punctuation">></span> 学的不仅是技术<span class="token blockquote punctuation">></span> 更是梦想 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 最外层<span class="token blockquote punctuation">> ></span> 第一层嵌套<span class="token blockquote punctuation">> > ></span> 第二层嵌套 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块中使用列表<span class="token blockquote punctuation">></span> <span class="token list punctuation">1.</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">2.</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第三项 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项    > 学的不仅是技术    > 更是梦想<span class="token list punctuation">*</span> 第二项 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">`<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 函数 < span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格 ** 或者一个 ** 制表符（Tab 键）</strong>。</p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">```javascript$<span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>```<span aria-hidden="true"class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p><pre class="line-numbers language-none"><code class="language-none">[链接名称](链接地址)或者&lt; 链接地址 & gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><pre class="line-numbers language-none"><code class="language-none"> 这个链接用 1 作为网址变量 [Google][1]然后在文档的结尾为变量赋值（网址）  [1]: http:&#x2F;&#x2F;www.google.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot; 可选标题 & quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>开头一个感叹号！</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><pre class="line-numbers language-none"><code class="language-none">![A](http:&#x2F;&#x2F;   )![A](http:&#x2F;&#x2F; &quot;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>当然，你也可以像网址那样对图片网址使用变量:</p><pre class="line-numbers language-none"><code class="language-none"> 这个链接用 1 作为网址变量 [A][1].然后在文档的结尾为变量赋值（网址）[1]: http:&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;.png&quot; width&#x3D;&quot;50%&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对齐方式</p><p>** 我们可以设置表格的对齐方式：**</p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><pre class="line-numbers language-none"><code class="language-none">| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code> 等 ，如：</p><pre class="line-numbers language-none"><code class="language-none"> 使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑 < span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class="line-numbers language-none"><code class="language-none">** 文本加粗 ** \*\* 正常显示星号 \*\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：<br>$$<br>\mathbf {V}_1 \times \mathbf {V}_2 =  \begin {vmatrix}<br>\mathbf {i} &amp; \mathbf {j} &amp; \mathbf {k} \<br>\frac {\partial X}{\partial u} &amp;  \frac {\partial Y}{\partial u} &amp; 0 \<br>\frac {\partial X}{\partial v} &amp;  \frac {\partial Y}{\partial v} &amp; 0 \<br>\end {vmatrix}<br>${$tep1}{\style {visibility:hidden}{(x+1)(x+1)}}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="2021/03/16/wo-de-di-yi-pian-bo-ke/"/>
      <url>2021/03/16/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="博客的创建"><a href="#博客的创建" class="headerlink" title="博客的创建"></a>博客的创建</h2><p> 2020 年 3 月 17 日，大学四年也来到了最后一个学期，毕业设计开始的时候，在做准备工作的过程中，发现这个世界有意思的东西好多。每个都想学好，无处下手，上周想找个东西能整理记录学习的历程，最终选择了写博客。</p><h2 id="本博客包含的内容"><a href="#本博客包含的内容" class="headerlink" title="本博客包含的内容"></a>本博客包含的内容</h2><p>先挖坑，再慢慢完善。</p><pre class="line-numbers language-none"><code class="language-none"> 一、工具类1. Office2. 博客二、计算机语言1. C 语言2. Python3. R 语言三、Linux 系统四、其他1. 公众号运营2. 电脑组装 < span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/16/hello-world/"/>
      <url>2021/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/03/16/chang-yong-ming-ling-ji-lu/"/>
      <url>2021/03/16/chang-yong-ming-ling-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令记录"><a href="#常用命令记录" class="headerlink" title="常用命令记录"></a>常用命令记录</h2><h3 id="Windows-常用命令"><a href="#Windows-常用命令" class="headerlink" title="Windows 常用命令"></a>Windows 常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dir</span> <span class="token comment">#(directory) ：列出当前目录下的文件以及文件夹 </span>md <span class="token comment">#(make directory)： 创建目录 </span>rd <span class="token comment">#(remove directory)：删除目录 </span><span class="token builtin class-name">cd</span> <span class="token comment">#(change directory)：进入指定目录 </span>cd<span class="token punctuation">..</span> <span class="token comment"># 退回到上一级目录 </span>cd<span class="token punctuation">\</span> <span class="token comment"># 退回到根目录 </span>del <span class="token comment"># 删除文件 </span><span class="token builtin class-name">exit</span> <span class="token comment"># 退出 dos 命令行 </span>cls <span class="token comment">#(clear screen): 清屏 </span>————————————————有关某个命令的详细信息，请键入 HELP 命令名ASSOC 显示或修改文件扩展名关联。ATTRIB 显示或更改文件属性。BREAK 设置或清除扩展式 CTRL+C 检查。BCDEDIT 设置启动数据库中的属性以控制启动加载。CACLS 显示或修改文件的访问控制列表 < span class="token punctuation">(</span>ACL<span class="token punctuation">)</span>。CALL 从另一个批处理程序调用这一个。CD 显示当前目录的名称或将其更改。CHCP 显示或设置活动代码页数。CHDIR 显示当前目录的名称或将其更改。CHKDSK 检查磁盘并显示状态报告。CHKNTFS 显示或修改启动时间磁盘检查。CLS 清除屏幕。CMD 打开另一个 Windows 命令解释程序窗口。COLOR 设置默认控制台前景和背景颜色。COMP 比较两个或两套文件的内容。COMPACT 显示或更改 NTFS 分区上文件的压缩。CONVERT 将 FAT 卷转换成 NTFS。您不能转换当前驱动器。COPY 将至少一个文件复制到另一个位置。DATE 显示或设置日期。DEL 删除至少一个文件。DIR 显示一个目录中的文件和子目录。DISKCOMP 比较两个软盘的内容。DISKCOPY 将一个软盘的内容复制到另一个软盘。DISKPART 显示或配置磁盘分区属性。DOSKEY 编辑命令行、调用 Windows 命令并创建宏。DRIVERQUERY 显示当前设备驱动程序状态和属性。ECHO 显示消息，或将命令回显打开或关上。ENDLOCAL 结束批文件中环境更改的本地化。ERASE 删除一个或多个文件。EXIT 退出 CMD.EXE 程序 < span class="token punctuation">(</span > 命令解释程序 < span class="token punctuation">)</span>。FC 比较两个文件或两个文件集并显示它们之间的不同。FIND 在一个或多个文件中搜索一个文本字符串。FINDSTR 在多个文件中搜索字符串。FOR 为一套文件中的每个文件运行一个指定的命令。FORMAT 格式化磁盘，以便跟 Windows 使用。FSUTIL 显示或配置文件系统的属性。FTYPE 显示或修改用在文件扩展名关联的文件类型。GOTO 将 Windows 命令解释程序指向批处理程序中某个带标签的行。GPRESULT 显示机器或用户的组策略信息。GRAFTABL 启用 Windows 在图形模式显示扩展字符集。HELP 提供 Windows 命令的帮助信息。ICACLS 显示、修改、备份或还原文件和目录的 ACL。IF 在批处理程序中执行有条件的处理过程。LABEL 创建、更改或删除磁盘的卷标。MD 创建一个目录。MKDIR 创建一个目录。MKLINK 创建符号链接和硬链接MODE 配置系统设备。MORE 逐屏显示输出。MOVE 将一个或多个文件从一个目录移动到另一个目录。OPENFILES 显示远程用户为了文件共享而打开的文件。<span class="token environment constant">PATH</span> 为可执行文件显示或设置搜索路径。PAUSE 停止批处理文件的处理并显示信息。POPD 还原由 PUSHD 保存的当前目录上一次的值。PRINT 打印一个文本文件。PROMPT 改变 Windows 命令提示。PUSHD 保存当前目录，然后对其进行更改。RD 删除目录。RECOVER 从损坏的磁盘中恢复可读取的信息。REM 记录批处理文件或 CONFIG.SYS 中的注释。REN 重新命名文件。RENAME 重新命名文件。REPLACE 替换文件。RMDIR 删除目录。ROBOCOPY 复制文件和目录树的高级实用程序SET 显示、设置或删除 Windows 环境变量。SETLOCAL 开始用批文件改变环境的本地化。SC 显示或配置服务 < span class="token punctuation">(</span > 后台处理 < span class="token punctuation">)</span>。SCHTASKS 安排命令和程序在一部计算机上按计划运行。SHIFT 调整批处理文件中可替换参数的位置。SHUTDOWN 让机器在本地或远程正确关闭。SORT 将输入排序。START 打开单独视窗运行指定程序或命令。SUBST 将驱动器号与路径关联。SYSTEMINFO 显示机器的具体的属性和配置。TASKLIST 显示包括服务的所有当前运行的任务。TASKKILL 终止正在运行的进程或应用程序。TIME 显示或设置系统时间。TITLE 设置 CMD.EXE 会话的窗口标题。TREE 以图形显示启动器或路径的目录结构。TYPE 显示文本文件的内容。VER 显示 Windows 的版本。VERIFY 告诉 Windows 验证文件是否正确写入磁盘。VOL 显示磁盘卷标和序列号。XCOPY 复制文件和目录树。WMIC 在交互命令外壳里显示 WMI 信息。————————————————<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo -g   <span class="token comment"># 安装  </span><span class="token function">npm</span> update hexo -g   <span class="token comment"># 升级 </span>hexo version        <span class="token comment"># 查看 hexo 的版本 </span>hexo init nodejs-hexo   <span class="token comment"># 创建 nodejs-hexo 名字的本地文件 </span>hexo init nodejs-hexo    <span class="token comment"># 创建博客 </span>hexo init blog          <span class="token comment"># 初始化，生成文件夹为 blog</span><span class="token builtin class-name">cd</span> blog               <span class="token comment"># 进入 blog 文件夹 </span><span class="token function">npm</span> <span class="token function">install</span>            <span class="token comment"># 安装依赖库 </span>hexo generate           <span class="token comment"># 生成一套静态网页 </span>hexo server         <span class="token comment"># 运行测试，浏览器打开地址，http:#localhost:4000/</span>hexo deploy         <span class="token comment"># 进行部署 </span>hexo new <span class="token string">"new article"</span>  <span class="token comment"># 新建文章‘new article’</span>hexo new page <span class="token string">"about"</span>  <span class="token comment"># 新建页面 ‘about’</span>hexo n <span class="token string">"我的博客"</span><span class="token variable"><span class="token variable">`</span> <span class="token operator">==</span> <span class="token variable">`</span></span>hexo new<span class="token variable"><span class="token variable">`</span> <span class="token string">" 我的博客 "</span>    <span class="token comment"># 新建文章 </span>hexo g <span class="token operator">==</span> hexo generate        <span class="token comment"># 生成 </span><span class="token variable">`</span></span>hexo s <span class="token operator">==</span> hexo server          <span class="token comment"># 启动服务预览 </span>hexo d <span class="token operator">==</span> hexo deploy          <span class="token comment"># 部署 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Anaconda-常用命令"><a href="#Anaconda-常用命令" class="headerlink" title="Anaconda 常用命令"></a>Anaconda 常用命令</h3><h4 id="1、Anaconda-升级"><a href="#1、Anaconda-升级" class="headerlink" title="1、Anaconda 升级"></a>1、Anaconda 升级</h4><p>升级 Anaconda 需要先升级 conda</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update condaconda update anacondaconda update anaconda-navigator    <span class="token comment">#update 最新版本的 anaconda-navigator   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、Anaconda-卸载"><a href="#2、Anaconda-卸载" class="headerlink" title="2、Anaconda 卸载"></a>2、Anaconda 卸载</h4><p>依次执行以下步骤</p><p>1)、打开 Anaconda Prompt，输入以下命令，删除所有配置文件和目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> anaconda-clean     <span class="token comment"># 安装 anaconda-clean</span>anaconda-clean --yes             <span class="token comment"># 运行 anaconda-clean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2)、手动删除 anaconda 安装目录下的 envs 和 pkgs 文件夹。</p><p>3)、在控制面板中，卸载 anaconda 程序。</p><h4 id="3、conda-环境使用基本命令"><a href="#3、conda-环境使用基本命令" class="headerlink" title="3、conda 环境使用基本命令"></a>3、conda 环境使用基本命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update -n base conda        <span class="token comment">#update 最新版本的 conda</span>conda create -n xxxx <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.5</span>   <span class="token comment"># 创建 python3.5 的 xxxx 虚拟环境 </span>conda remove -n xxxx --all        <span class="token comment"># 移除 xxxx 虚拟环境 </span>conda activate xxxx               <span class="token comment"># 开启 xxxx 环境 </span>conda deactivate                  <span class="token comment"># 关闭环境 </span>conda <span class="token function">env</span> list                    <span class="token comment"># 显示所有的虚拟环境 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、更新，卸载安装包"><a href="#4、更新，卸载安装包" class="headerlink" title="4、更新，卸载安装包"></a>4、更新，卸载安装包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list               <span class="token comment"># 查看已经安装的文件包 </span>conda list  -n xxx       <span class="token comment"># 指定查看 xxx 虚拟环境下安装的 package</span>conda update xxx         <span class="token comment"># 更新 xxx 文件包 </span>conda uninstall xxx      <span class="token comment"># 卸载 xxx 文件包 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、清理（conda-瘦身）"><a href="#5、清理（conda-瘦身）" class="headerlink" title="5、清理（conda 瘦身）"></a>5、清理（conda 瘦身）</h4><p>onda clean 就可以轻松搞定！第一步：通过 conda clean -p 来删除一些没用的包，这个命令会检查哪些包没有在包缓存中被硬依赖到其他地方，并删除它们。第二步：通过 conda clean -t 可以将 conda 保存下来的 tar 包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda clean -p      <span class="token comment"># 删除从不使用的包 </span>conda clean -t      <span class="token comment"># 删除 tar 包 </span>conda clean -y -all <span class="token comment"># 删除所有的安装包及 cache</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6、国内镜像源"><a href="#6、国内镜像源" class="headerlink" title="6、国内镜像源"></a>6、国内镜像源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加 Anaconda 的 TUNA 镜像 </span>conda config --add channels https:<span class="token comment">#mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span>conda config --add channels https:<span class="token comment">#mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span>conda config --add channels https:<span class="token comment">#mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><span class="token comment"># 需要 pytorch 的话，添加 pytorch 镜像 </span>conda config --add channels https:<span class="token comment">#mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><span class="token comment"># 设置搜索时显示通道地址 </span>conda config --set show_channel_urls <span class="token function">yes</span><span class="token comment"># 恢复成默认下载源 </span>conda config --remove-key channels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pip-常用命令"><a href="#pip-常用命令" class="headerlink" title="pip 常用命令"></a>pip 常用命令</h3><h4 id="1、源切换"><a href="#1、源切换" class="headerlink" title="1、源切换"></a>1、源切换</h4><pre class="line-numbers language-none"><code class="language-none">pip3 install xxx -i https:#pypi.Python.org&#x2F;simple&#x2F; #pip 命令中使用 -i 参数来指定镜像地址#Windows 下，你需要在当前对用户目录下（C:\Users\xx\pip，xx 表示当前使用对用户，比如张三）创建一个 pip.ini 在 pip.ini 文件中输入以下内容：[global]index-url &#x3D; https:#pypi.tuna.tsinghua.edu.cn&#x2F;simple[install]trusted-host &#x3D; pypi.tuna.tsinghua.edu.cn# 其他国内镜像源阿里：https:#mirrors.aliyun.com&#x2F;pypi&#x2F;simple清华：https:#pypi.tuna.tsinghua.edu.cn&#x2F;simple中国科学技术大学 : https:#pypi.mirrors.ustc.edu.cn&#x2F;simple豆瓣：http:#pypi.douban.com&#x2F;simple&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
